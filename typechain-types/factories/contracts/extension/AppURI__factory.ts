/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  AppURI,
  AppURIInterface,
} from "../../../contracts/extension/AppURI";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "prevURI",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "newURI",
        type: "string",
      },
    ],
    name: "AppURIUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "appURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    name: "setAppURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class AppURI__factory {
  static readonly abi = _abi;
  static createInterface(): AppURIInterface {
    return new Interface(_abi) as AppURIInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AppURI {
    return new Contract(address, _abi, runner) as unknown as AppURI;
  }
}
