/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BatchMintMetadata,
  BatchMintMetadataInterface,
} from "../../../contracts/extension/BatchMintMetadata";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "BatchMintInvalidBatchId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "BatchMintInvalidTokenId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "batchId",
        type: "uint256",
      },
    ],
    name: "BatchMintMetadataFrozen",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_fromTokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_toTokenId",
        type: "uint256",
      },
    ],
    name: "BatchMetadataUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "MetadataFrozen",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "batchFrozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseURICount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getBatchIdAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0000008003000039000000400030043f000000000301001900000060033002700000001a033001970000000102200190000000210000c13d000000040230008c000000430000413d000000000201043b000000e0022002700000001c0420009c000000290000613d0000001d0420009c0000003c0000613d0000001e0220009c000000430000c13d0000000002000416000000240330008c000000430000413d000000000202004b000000430000c13d0000000401100370000000000101043b000000000200041a000000000221004b000000450000813d00000000000004350000002201100041000000000101041a000000800010043f0000001f01000041000000620001042e0000000001000416000000000101004b000000430000c13d0000002001000039000001000010044300000120000004430000001b01000041000000620001042e0000000002000416000000240330008c000000430000413d000000000202004b000000430000c13d0000000401100370000000000101043b00000000001004350000000201000039000000200010043f00000000010000190061004a0000040f000000000101041a000000ff011001900000000001000019000000010100c039000000800010043f0000001f01000041000000620001042e0000000001000416000000000101004b000000430000c13d000000000100041a000000800010043f0000001f01000041000000620001042e000000000100001900000063000104300000002002000041000000800020043f000000840010043f000000210100004100000063000104300000001a020000410000001a0310009c000000000102801900000000030004140000001a0430009c0000000003028019000000c0023002100000004001100210000000000121019f00000023011001c700008010020000390061005c0000040f00000001022001900000005a0000613d000000000101043b000000000001042d000000000100001900000063000104300000005f002104230000000102000039000000000001042d0000000002000019000000000001042d0000006100000432000000620001042e0000006300010430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000830405320000000000000000000000000000000000000000000000000000000063b45e2d000000000000000000000000000000000000000000000000000000002419f51b00000000000000000000000000000000000000200000008000000000000000000f2624ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000800000000000000000290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630200000000000000000000000000000000000040000000000000000000000000c6e73969d216308430481dac66186311bb2dae7cdafd0db95cca7dae64a95465";

type BatchMintMetadataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchMintMetadataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchMintMetadata__factory extends ContractFactory {
  constructor(...args: BatchMintMetadataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BatchMintMetadata & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BatchMintMetadata__factory {
    return super.connect(runner) as BatchMintMetadata__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchMintMetadataInterface {
    return new Interface(_abi) as BatchMintMetadataInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BatchMintMetadata {
    return new Contract(address, _abi, runner) as unknown as BatchMintMetadata;
  }
}
