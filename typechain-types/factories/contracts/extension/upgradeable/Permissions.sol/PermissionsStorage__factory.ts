/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  PermissionsStorage,
  PermissionsStorageInterface,
} from "../../../../../contracts/extension/upgradeable/Permissions.sol/PermissionsStorage";

const _abi = [
  {
    inputs: [],
    name: "PERMISSIONS_STORAGE_POSITION",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0000008003000039000000400030043f00000001022001900000000f0000c13d00000000020100190000000902200198000000170000613d000000000101043b0000000a011001970000000b0110009c000000170000c13d0000000c01000041000000800010043f0000000d010000410000001a0001042e0000000001000416000000000101004b000000170000c13d00000020010000390000010000100443000001200000044300000008010000410000001a0001042e00000000010000190000001b0001043000000019000004320000001a0001042e0000001b000104300000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000fffffffc000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000000998ed3b000000000000000000000000000000000000000000000000000000000a7b0f5c59907924802379ebe98cdc23e2ee7820f63d30126e10b3752010e50000000000000000000000000000000000000000200000008000000000000000008d0b55ae463ae3294356024f78583347bf740d8b79a2e8edc4d25751e0c210ca";

type PermissionsStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionsStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermissionsStorage__factory extends ContractFactory {
  constructor(...args: PermissionsStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PermissionsStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PermissionsStorage__factory {
    return super.connect(runner) as PermissionsStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionsStorageInterface {
    return new Interface(_abi) as PermissionsStorageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermissionsStorage {
    return new Contract(address, _abi, runner) as unknown as PermissionsStorage;
  }
}
