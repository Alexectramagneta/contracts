/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMultiwrap,
  IMultiwrapInterface,
} from "../../../../contracts/prebuilts/interface/IMultiwrap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "unwrapper",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipientOfWrappedContents",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenIdOfWrappedToken",
        type: "uint256",
      },
    ],
    name: "TokensUnwrapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wrapper",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipientOfWrappedToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenIdOfWrappedToken",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "assetContract",
            type: "address",
          },
          {
            internalType: "enum ITokenBundle.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ITokenBundle.Token[]",
        name: "wrappedContents",
        type: "tuple[]",
      },
    ],
    name: "TokensWrapped",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "unwrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetContract",
            type: "address",
          },
          {
            internalType: "enum ITokenBundle.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ITokenBundle.Token[]",
        name: "wrappedContents",
        type: "tuple[]",
      },
      {
        internalType: "string",
        name: "uriForWrappedToken",
        type: "string",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "wrap",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IMultiwrap__factory {
  static readonly abi = _abi;
  static createInterface(): IMultiwrapInterface {
    return new Interface(_abi) as IMultiwrapInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IMultiwrap {
    return new Contract(address, _abi, runner) as unknown as IMultiwrap;
  }
}
