/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAirdropERC1155Claimable,
  IAirdropERC1155ClaimableInterface,
} from "../../../../../contracts/prebuilts/interface/airdrop/IAirdropERC1155Claimable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quantityClaimed",
        type: "uint256",
      },
    ],
    name: "TokensClaimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proofs",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "proofMaxQuantityForWallet",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IAirdropERC1155Claimable__factory {
  static readonly abi = _abi;
  static createInterface(): IAirdropERC1155ClaimableInterface {
    return new Interface(_abi) as IAirdropERC1155ClaimableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IAirdropERC1155Claimable {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IAirdropERC1155Claimable;
  }
}
