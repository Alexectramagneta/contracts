/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IThirdwebContract,
  IThirdwebContractInterface,
} from "../../../../contracts/infra/interface/IThirdwebContract";

const _abi = [
  {
    inputs: [],
    name: "contractType",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "contractURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contractVersion",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    name: "setContractURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IThirdwebContract__factory {
  static readonly abi = _abi;
  static createInterface(): IThirdwebContractInterface {
    return new Interface(_abi) as IThirdwebContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IThirdwebContract {
    return new Contract(address, _abi, runner) as unknown as IThirdwebContract;
  }
}
