/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IStaking1155Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "getStakeInfo"
      | "getStakeInfoForToken"
      | "stake"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardsClaimed"
      | "TokensStaked"
      | "TokensWithdrawn"
      | "UpdatedDefaultRewardsPerUnitTime"
      | "UpdatedDefaultTimeUnit"
      | "UpdatedRewardsPerUnitTime"
      | "UpdatedTimeUnit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfoForToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [staker: AddressLike, rewardAmount: BigNumberish];
  export type OutputTuple = [staker: string, rewardAmount: bigint];
  export interface OutputObject {
    staker: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [
    staker: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, tokenId: bigint, amount: bigint];
  export interface OutputObject {
    staker: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [
    staker: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, tokenId: bigint, amount: bigint];
  export interface OutputObject {
    staker: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedDefaultRewardsPerUnitTimeEvent {
  export type InputTuple = [
    oldRewardsPerUnitTime: BigNumberish,
    newRewardsPerUnitTime: BigNumberish
  ];
  export type OutputTuple = [
    oldRewardsPerUnitTime: bigint,
    newRewardsPerUnitTime: bigint
  ];
  export interface OutputObject {
    oldRewardsPerUnitTime: bigint;
    newRewardsPerUnitTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedDefaultTimeUnitEvent {
  export type InputTuple = [
    oldTimeUnit: BigNumberish,
    newTimeUnit: BigNumberish
  ];
  export type OutputTuple = [oldTimeUnit: bigint, newTimeUnit: bigint];
  export interface OutputObject {
    oldTimeUnit: bigint;
    newTimeUnit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRewardsPerUnitTimeEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    oldRewardsPerUnitTime: BigNumberish,
    newRewardsPerUnitTime: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    oldRewardsPerUnitTime: bigint,
    newRewardsPerUnitTime: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    oldRewardsPerUnitTime: bigint;
    newRewardsPerUnitTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedTimeUnitEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    oldTimeUnit: BigNumberish,
    newTimeUnit: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    oldTimeUnit: bigint,
    newTimeUnit: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    oldTimeUnit: bigint;
    newTimeUnit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStaking1155 extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking1155;
  waitForDeployment(): Promise<this>;

  interface: IStaking1155Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getStakeInfo: TypedContractMethod<
    [staker: AddressLike],
    [
      [bigint[], bigint[], bigint] & {
        _tokensStaked: bigint[];
        _tokenAmounts: bigint[];
        _totalRewards: bigint;
      }
    ],
    "view"
  >;

  getStakeInfoForToken: TypedContractMethod<
    [tokenId: BigNumberish, staker: AddressLike],
    [[bigint, bigint] & { _tokensStaked: bigint; _rewards: bigint }],
    "view"
  >;

  stake: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [staker: AddressLike],
    [
      [bigint[], bigint[], bigint] & {
        _tokensStaked: bigint[];
        _tokenAmounts: bigint[];
        _totalRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeInfoForToken"
  ): TypedContractMethod<
    [tokenId: BigNumberish, staker: AddressLike],
    [[bigint, bigint] & { _tokensStaked: bigint; _rewards: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;
  getEvent(
    key: "TokensWithdrawn"
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedDefaultRewardsPerUnitTime"
  ): TypedContractEvent<
    UpdatedDefaultRewardsPerUnitTimeEvent.InputTuple,
    UpdatedDefaultRewardsPerUnitTimeEvent.OutputTuple,
    UpdatedDefaultRewardsPerUnitTimeEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedDefaultTimeUnit"
  ): TypedContractEvent<
    UpdatedDefaultTimeUnitEvent.InputTuple,
    UpdatedDefaultTimeUnitEvent.OutputTuple,
    UpdatedDefaultTimeUnitEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRewardsPerUnitTime"
  ): TypedContractEvent<
    UpdatedRewardsPerUnitTimeEvent.InputTuple,
    UpdatedRewardsPerUnitTimeEvent.OutputTuple,
    UpdatedRewardsPerUnitTimeEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedTimeUnit"
  ): TypedContractEvent<
    UpdatedTimeUnitEvent.InputTuple,
    UpdatedTimeUnitEvent.OutputTuple,
    UpdatedTimeUnitEvent.OutputObject
  >;

  filters: {
    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "TokensStaked(address,uint256,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;

    "TokensWithdrawn(address,uint256,uint256)": TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;

    "UpdatedDefaultRewardsPerUnitTime(uint256,uint256)": TypedContractEvent<
      UpdatedDefaultRewardsPerUnitTimeEvent.InputTuple,
      UpdatedDefaultRewardsPerUnitTimeEvent.OutputTuple,
      UpdatedDefaultRewardsPerUnitTimeEvent.OutputObject
    >;
    UpdatedDefaultRewardsPerUnitTime: TypedContractEvent<
      UpdatedDefaultRewardsPerUnitTimeEvent.InputTuple,
      UpdatedDefaultRewardsPerUnitTimeEvent.OutputTuple,
      UpdatedDefaultRewardsPerUnitTimeEvent.OutputObject
    >;

    "UpdatedDefaultTimeUnit(uint256,uint256)": TypedContractEvent<
      UpdatedDefaultTimeUnitEvent.InputTuple,
      UpdatedDefaultTimeUnitEvent.OutputTuple,
      UpdatedDefaultTimeUnitEvent.OutputObject
    >;
    UpdatedDefaultTimeUnit: TypedContractEvent<
      UpdatedDefaultTimeUnitEvent.InputTuple,
      UpdatedDefaultTimeUnitEvent.OutputTuple,
      UpdatedDefaultTimeUnitEvent.OutputObject
    >;

    "UpdatedRewardsPerUnitTime(uint256,uint256,uint256)": TypedContractEvent<
      UpdatedRewardsPerUnitTimeEvent.InputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputObject
    >;
    UpdatedRewardsPerUnitTime: TypedContractEvent<
      UpdatedRewardsPerUnitTimeEvent.InputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputObject
    >;

    "UpdatedTimeUnit(uint256,uint256,uint256)": TypedContractEvent<
      UpdatedTimeUnitEvent.InputTuple,
      UpdatedTimeUnitEvent.OutputTuple,
      UpdatedTimeUnitEvent.OutputObject
    >;
    UpdatedTimeUnit: TypedContractEvent<
      UpdatedTimeUnitEvent.InputTuple,
      UpdatedTimeUnitEvent.OutputTuple,
      UpdatedTimeUnitEvent.OutputObject
    >;
  };
}
