/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISharedMetadata {
  export type SharedMetadataInfoStruct = {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  };

  export type SharedMetadataInfoStructOutput = [
    name: string,
    description: string,
    imageURI: string,
    animationURI: string
  ] & {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  };
}

export interface ISharedMetadataInterface extends Interface {
  getFunction(nameOrSignature: "setSharedMetadata"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SharedMetadataUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "setSharedMetadata",
    values: [ISharedMetadata.SharedMetadataInfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "setSharedMetadata",
    data: BytesLike
  ): Result;
}

export namespace SharedMetadataUpdatedEvent {
  export type InputTuple = [
    name: string,
    description: string,
    imageURI: string,
    animationURI: string
  ];
  export type OutputTuple = [
    name: string,
    description: string,
    imageURI: string,
    animationURI: string
  ];
  export interface OutputObject {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISharedMetadata extends BaseContract {
  connect(runner?: ContractRunner | null): ISharedMetadata;
  waitForDeployment(): Promise<this>;

  interface: ISharedMetadataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setSharedMetadata: TypedContractMethod<
    [_metadata: ISharedMetadata.SharedMetadataInfoStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setSharedMetadata"
  ): TypedContractMethod<
    [_metadata: ISharedMetadata.SharedMetadataInfoStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SharedMetadataUpdated"
  ): TypedContractEvent<
    SharedMetadataUpdatedEvent.InputTuple,
    SharedMetadataUpdatedEvent.OutputTuple,
    SharedMetadataUpdatedEvent.OutputObject
  >;

  filters: {
    "SharedMetadataUpdated(string,string,string,string)": TypedContractEvent<
      SharedMetadataUpdatedEvent.InputTuple,
      SharedMetadataUpdatedEvent.OutputTuple,
      SharedMetadataUpdatedEvent.OutputObject
    >;
    SharedMetadataUpdated: TypedContractEvent<
      SharedMetadataUpdatedEvent.InputTuple,
      SharedMetadataUpdatedEvent.OutputTuple,
      SharedMetadataUpdatedEvent.OutputObject
    >;
  };
}
