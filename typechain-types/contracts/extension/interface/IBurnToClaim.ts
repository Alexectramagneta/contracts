/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IBurnToClaim {
  export type BurnToClaimInfoStruct = {
    originContractAddress: AddressLike;
    tokenType: BigNumberish;
    tokenId: BigNumberish;
    mintPriceForNewToken: BigNumberish;
    currency: AddressLike;
  };

  export type BurnToClaimInfoStructOutput = [
    originContractAddress: string,
    tokenType: bigint,
    tokenId: bigint,
    mintPriceForNewToken: bigint,
    currency: string
  ] & {
    originContractAddress: string;
    tokenType: bigint;
    tokenId: bigint;
    mintPriceForNewToken: bigint;
    currency: string;
  };
}

export interface IBurnToClaimInterface extends Interface {
  getFunction(nameOrSignature: "setBurnToClaimInfo"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokensBurnedAndClaimed"): EventFragment;

  encodeFunctionData(
    functionFragment: "setBurnToClaimInfo",
    values: [IBurnToClaim.BurnToClaimInfoStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "setBurnToClaimInfo",
    data: BytesLike
  ): Result;
}

export namespace TokensBurnedAndClaimedEvent {
  export type InputTuple = [
    originContract: AddressLike,
    tokenOwner: AddressLike,
    burnTokenId: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    originContract: string,
    tokenOwner: string,
    burnTokenId: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    originContract: string;
    tokenOwner: string;
    burnTokenId: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBurnToClaim extends BaseContract {
  connect(runner?: ContractRunner | null): IBurnToClaim;
  waitForDeployment(): Promise<this>;

  interface: IBurnToClaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setBurnToClaimInfo: TypedContractMethod<
    [burnToClaimInfo: IBurnToClaim.BurnToClaimInfoStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setBurnToClaimInfo"
  ): TypedContractMethod<
    [burnToClaimInfo: IBurnToClaim.BurnToClaimInfoStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TokensBurnedAndClaimed"
  ): TypedContractEvent<
    TokensBurnedAndClaimedEvent.InputTuple,
    TokensBurnedAndClaimedEvent.OutputTuple,
    TokensBurnedAndClaimedEvent.OutputObject
  >;

  filters: {
    "TokensBurnedAndClaimed(address,address,uint256,uint256)": TypedContractEvent<
      TokensBurnedAndClaimedEvent.InputTuple,
      TokensBurnedAndClaimedEvent.OutputTuple,
      TokensBurnedAndClaimedEvent.OutputObject
    >;
    TokensBurnedAndClaimed: TypedContractEvent<
      TokensBurnedAndClaimedEvent.InputTuple,
      TokensBurnedAndClaimedEvent.OutputTuple,
      TokensBurnedAndClaimedEvent.OutputObject
    >;
  };
}
