/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IRulesEngine {
  export type RuleWithIdStruct = {
    ruleId: BytesLike;
    token: AddressLike;
    tokenType: BigNumberish;
    tokenId: BigNumberish;
    balance: BigNumberish;
    score: BigNumberish;
    ruleType: BigNumberish;
  };

  export type RuleWithIdStructOutput = [
    ruleId: string,
    token: string,
    tokenType: bigint,
    tokenId: bigint,
    balance: bigint,
    score: bigint,
    ruleType: bigint
  ] & {
    ruleId: string;
    token: string;
    tokenType: bigint;
    tokenId: bigint;
    balance: bigint;
    score: bigint;
    ruleType: bigint;
  };

  export type RuleTypeMultiplicativeStruct = {
    token: AddressLike;
    tokenType: BigNumberish;
    tokenId: BigNumberish;
    scorePerOwnedToken: BigNumberish;
  };

  export type RuleTypeMultiplicativeStructOutput = [
    token: string,
    tokenType: bigint,
    tokenId: bigint,
    scorePerOwnedToken: bigint
  ] & {
    token: string;
    tokenType: bigint;
    tokenId: bigint;
    scorePerOwnedToken: bigint;
  };

  export type RuleTypeThresholdStruct = {
    token: AddressLike;
    tokenType: BigNumberish;
    tokenId: BigNumberish;
    balance: BigNumberish;
    score: BigNumberish;
  };

  export type RuleTypeThresholdStructOutput = [
    token: string,
    tokenType: bigint,
    tokenId: bigint,
    balance: bigint,
    score: bigint
  ] & {
    token: string;
    tokenType: bigint;
    tokenId: bigint;
    balance: bigint;
    score: bigint;
  };
}

export interface IRulesEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRuleMultiplicative"
      | "createRuleThreshold"
      | "deleteRule"
      | "getAllRules"
      | "getRulesEngineOverride"
      | "getScore"
      | "setRulesEngineOverride"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RuleCreated"
      | "RuleDeleted"
      | "RulesEngineOverriden"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRuleMultiplicative",
    values: [IRulesEngine.RuleTypeMultiplicativeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRuleThreshold",
    values: [IRulesEngine.RuleTypeThresholdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRulesEngineOverride",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRulesEngineOverride",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRuleMultiplicative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRuleThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRulesEngineOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRulesEngineOverride",
    data: BytesLike
  ): Result;
}

export namespace RuleCreatedEvent {
  export type InputTuple = [
    ruleId: BytesLike,
    rule: IRulesEngine.RuleWithIdStruct
  ];
  export type OutputTuple = [
    ruleId: string,
    rule: IRulesEngine.RuleWithIdStructOutput
  ];
  export interface OutputObject {
    ruleId: string;
    rule: IRulesEngine.RuleWithIdStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RuleDeletedEvent {
  export type InputTuple = [ruleId: BytesLike];
  export type OutputTuple = [ruleId: string];
  export interface OutputObject {
    ruleId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RulesEngineOverridenEvent {
  export type InputTuple = [newRulesEngine: AddressLike];
  export type OutputTuple = [newRulesEngine: string];
  export interface OutputObject {
    newRulesEngine: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRulesEngine extends BaseContract {
  connect(runner?: ContractRunner | null): IRulesEngine;
  waitForDeployment(): Promise<this>;

  interface: IRulesEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRuleMultiplicative: TypedContractMethod<
    [rule: IRulesEngine.RuleTypeMultiplicativeStruct],
    [string],
    "nonpayable"
  >;

  createRuleThreshold: TypedContractMethod<
    [rule: IRulesEngine.RuleTypeThresholdStruct],
    [string],
    "nonpayable"
  >;

  deleteRule: TypedContractMethod<[ruleId: BytesLike], [void], "nonpayable">;

  getAllRules: TypedContractMethod<
    [],
    [IRulesEngine.RuleWithIdStructOutput[]],
    "view"
  >;

  getRulesEngineOverride: TypedContractMethod<[], [string], "view">;

  getScore: TypedContractMethod<[_tokenOwner: AddressLike], [bigint], "view">;

  setRulesEngineOverride: TypedContractMethod<
    [_rulesEngineAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRuleMultiplicative"
  ): TypedContractMethod<
    [rule: IRulesEngine.RuleTypeMultiplicativeStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRuleThreshold"
  ): TypedContractMethod<
    [rule: IRulesEngine.RuleTypeThresholdStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteRule"
  ): TypedContractMethod<[ruleId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllRules"
  ): TypedContractMethod<[], [IRulesEngine.RuleWithIdStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRulesEngineOverride"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[_tokenOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRulesEngineOverride"
  ): TypedContractMethod<
    [_rulesEngineAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RuleCreated"
  ): TypedContractEvent<
    RuleCreatedEvent.InputTuple,
    RuleCreatedEvent.OutputTuple,
    RuleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RuleDeleted"
  ): TypedContractEvent<
    RuleDeletedEvent.InputTuple,
    RuleDeletedEvent.OutputTuple,
    RuleDeletedEvent.OutputObject
  >;
  getEvent(
    key: "RulesEngineOverriden"
  ): TypedContractEvent<
    RulesEngineOverridenEvent.InputTuple,
    RulesEngineOverridenEvent.OutputTuple,
    RulesEngineOverridenEvent.OutputObject
  >;

  filters: {
    "RuleCreated(bytes32,tuple)": TypedContractEvent<
      RuleCreatedEvent.InputTuple,
      RuleCreatedEvent.OutputTuple,
      RuleCreatedEvent.OutputObject
    >;
    RuleCreated: TypedContractEvent<
      RuleCreatedEvent.InputTuple,
      RuleCreatedEvent.OutputTuple,
      RuleCreatedEvent.OutputObject
    >;

    "RuleDeleted(bytes32)": TypedContractEvent<
      RuleDeletedEvent.InputTuple,
      RuleDeletedEvent.OutputTuple,
      RuleDeletedEvent.OutputObject
    >;
    RuleDeleted: TypedContractEvent<
      RuleDeletedEvent.InputTuple,
      RuleDeletedEvent.OutputTuple,
      RuleDeletedEvent.OutputObject
    >;

    "RulesEngineOverriden(address)": TypedContractEvent<
      RulesEngineOverridenEvent.InputTuple,
      RulesEngineOverridenEvent.OutputTuple,
      RulesEngineOverridenEvent.OutputObject
    >;
    RulesEngineOverriden: TypedContractEvent<
      RulesEngineOverridenEvent.InputTuple,
      RulesEngineOverridenEvent.OutputTuple,
      RulesEngineOverridenEvent.OutputObject
    >;
  };
}
