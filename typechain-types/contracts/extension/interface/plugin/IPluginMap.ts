/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IPluginMap {
  export type PluginStruct = {
    functionSelector: BytesLike;
    functionSignature: string;
    pluginAddress: AddressLike;
  };

  export type PluginStructOutput = [
    functionSelector: string,
    functionSignature: string,
    pluginAddress: string
  ] & {
    functionSelector: string;
    functionSignature: string;
    pluginAddress: string;
  };
}

export interface IPluginMapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllFunctionsOfPlugin"
      | "getAllPlugins"
      | "getPluginForFunction"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PluginSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllFunctionsOfPlugin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlugins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPluginForFunction",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllFunctionsOfPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPluginForFunction",
    data: BytesLike
  ): Result;
}

export namespace PluginSetEvent {
  export type InputTuple = [
    functionSelector: BytesLike,
    functionSignature: string,
    pluginAddress: AddressLike
  ];
  export type OutputTuple = [
    functionSelector: string,
    functionSignature: string,
    pluginAddress: string
  ];
  export interface OutputObject {
    functionSelector: string;
    functionSignature: string;
    pluginAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPluginMap extends BaseContract {
  connect(runner?: ContractRunner | null): IPluginMap;
  waitForDeployment(): Promise<this>;

  interface: IPluginMapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllFunctionsOfPlugin: TypedContractMethod<
    [pluginAddress: AddressLike],
    [string[]],
    "view"
  >;

  getAllPlugins: TypedContractMethod<
    [],
    [IPluginMap.PluginStructOutput[]],
    "view"
  >;

  getPluginForFunction: TypedContractMethod<
    [functionSelector: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllFunctionsOfPlugin"
  ): TypedContractMethod<[pluginAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllPlugins"
  ): TypedContractMethod<[], [IPluginMap.PluginStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPluginForFunction"
  ): TypedContractMethod<[functionSelector: BytesLike], [string], "view">;

  getEvent(
    key: "PluginSet"
  ): TypedContractEvent<
    PluginSetEvent.InputTuple,
    PluginSetEvent.OutputTuple,
    PluginSetEvent.OutputObject
  >;

  filters: {
    "PluginSet(bytes4,string,address)": TypedContractEvent<
      PluginSetEvent.InputTuple,
      PluginSetEvent.OutputTuple,
      PluginSetEvent.OutputObject
    >;
    PluginSet: TypedContractEvent<
      PluginSetEvent.InputTuple,
      PluginSetEvent.OutputTuple,
      PluginSetEvent.OutputObject
    >;
  };
}
