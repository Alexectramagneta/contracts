/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDelayedRevealInterface extends Interface {
  getFunction(nameOrSignature: "encryptDecrypt" | "reveal"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokenURIRevealed"): EventFragment;

  encodeFunctionData(
    functionFragment: "encryptDecrypt",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "encryptDecrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
}

export namespace TokenURIRevealedEvent {
  export type InputTuple = [index: BigNumberish, revealedURI: string];
  export type OutputTuple = [index: bigint, revealedURI: string];
  export interface OutputObject {
    index: bigint;
    revealedURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelayedReveal extends BaseContract {
  connect(runner?: ContractRunner | null): IDelayedReveal;
  waitForDeployment(): Promise<this>;

  interface: IDelayedRevealInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  encryptDecrypt: TypedContractMethod<
    [data: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  reveal: TypedContractMethod<
    [identifier: BigNumberish, key: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "encryptDecrypt"
  ): TypedContractMethod<[data: BytesLike, key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [identifier: BigNumberish, key: BytesLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "TokenURIRevealed"
  ): TypedContractEvent<
    TokenURIRevealedEvent.InputTuple,
    TokenURIRevealedEvent.OutputTuple,
    TokenURIRevealedEvent.OutputObject
  >;

  filters: {
    "TokenURIRevealed(uint256,string)": TypedContractEvent<
      TokenURIRevealedEvent.InputTuple,
      TokenURIRevealedEvent.OutputTuple,
      TokenURIRevealedEvent.OutputObject
    >;
    TokenURIRevealed: TypedContractEvent<
      TokenURIRevealedEvent.InputTuple,
      TokenURIRevealedEvent.OutputTuple,
      TokenURIRevealedEvent.OutputObject
    >;
  };
}
