/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRoyaltyPaymentsInterface extends Interface {
  getFunction(
    nameOrSignature: "getRoyalty" | "setRoyaltyEngine" | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RoyaltyEngineUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getRoyalty",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyEngine",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoyaltyEngineUpdatedEvent {
  export type InputTuple = [
    previousAddress: AddressLike,
    newAddress: AddressLike
  ];
  export type OutputTuple = [previousAddress: string, newAddress: string];
  export interface OutputObject {
    previousAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRoyaltyPayments extends BaseContract {
  connect(runner?: ContractRunner | null): IRoyaltyPayments;
  waitForDeployment(): Promise<this>;

  interface: IRoyaltyPaymentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRoyalty: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, value: BigNumberish],
    [[string[], bigint[]] & { recipients: string[]; amounts: bigint[] }],
    "nonpayable"
  >;

  setRoyaltyEngine: TypedContractMethod<
    [_royaltyEngineAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRoyalty"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, value: BigNumberish],
    [[string[], bigint[]] & { recipients: string[]; amounts: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoyaltyEngine"
  ): TypedContractMethod<
    [_royaltyEngineAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoyaltyEngineUpdated"
  ): TypedContractEvent<
    RoyaltyEngineUpdatedEvent.InputTuple,
    RoyaltyEngineUpdatedEvent.OutputTuple,
    RoyaltyEngineUpdatedEvent.OutputObject
  >;

  filters: {
    "RoyaltyEngineUpdated(address,address)": TypedContractEvent<
      RoyaltyEngineUpdatedEvent.InputTuple,
      RoyaltyEngineUpdatedEvent.OutputTuple,
      RoyaltyEngineUpdatedEvent.OutputObject
    >;
    RoyaltyEngineUpdated: TypedContractEvent<
      RoyaltyEngineUpdatedEvent.InputTuple,
      RoyaltyEngineUpdatedEvent.OutputTuple,
      RoyaltyEngineUpdatedEvent.OutputObject
    >;
  };
}
