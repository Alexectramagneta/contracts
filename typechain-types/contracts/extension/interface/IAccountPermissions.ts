/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IAccountPermissions {
  export type SignerPermissionRequestStruct = {
    signer: AddressLike;
    isAdmin: BigNumberish;
    approvedTargets: AddressLike[];
    nativeTokenLimitPerTransaction: BigNumberish;
    permissionStartTimestamp: BigNumberish;
    permissionEndTimestamp: BigNumberish;
    reqValidityStartTimestamp: BigNumberish;
    reqValidityEndTimestamp: BigNumberish;
    uid: BytesLike;
  };

  export type SignerPermissionRequestStructOutput = [
    signer: string,
    isAdmin: bigint,
    approvedTargets: string[],
    nativeTokenLimitPerTransaction: bigint,
    permissionStartTimestamp: bigint,
    permissionEndTimestamp: bigint,
    reqValidityStartTimestamp: bigint,
    reqValidityEndTimestamp: bigint,
    uid: string
  ] & {
    signer: string;
    isAdmin: bigint;
    approvedTargets: string[];
    nativeTokenLimitPerTransaction: bigint;
    permissionStartTimestamp: bigint;
    permissionEndTimestamp: bigint;
    reqValidityStartTimestamp: bigint;
    reqValidityEndTimestamp: bigint;
    uid: string;
  };

  export type SignerPermissionsStruct = {
    signer: AddressLike;
    approvedTargets: AddressLike[];
    nativeTokenLimitPerTransaction: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
  };

  export type SignerPermissionsStructOutput = [
    signer: string,
    approvedTargets: string[],
    nativeTokenLimitPerTransaction: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint
  ] & {
    signer: string;
    approvedTargets: string[];
    nativeTokenLimitPerTransaction: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
  };
}

export interface IAccountPermissionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllActiveSigners"
      | "getAllAdmins"
      | "getAllSigners"
      | "getPermissionsForSigner"
      | "isActiveSigner"
      | "isAdmin"
      | "setPermissionsForSigner"
      | "verifySignerPermissionRequest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdminUpdated" | "SignerPermissionsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllActiveSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionsForSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsForSigner",
    values: [IAccountPermissions.SignerPermissionRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignerPermissionRequest",
    values: [IAccountPermissions.SignerPermissionRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllActiveSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionsForSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsForSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignerPermissionRequest",
    data: BytesLike
  ): Result;
}

export namespace AdminUpdatedEvent {
  export type InputTuple = [signer: AddressLike, isAdmin: boolean];
  export type OutputTuple = [signer: string, isAdmin: boolean];
  export interface OutputObject {
    signer: string;
    isAdmin: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerPermissionsUpdatedEvent {
  export type InputTuple = [
    authorizingSigner: AddressLike,
    targetSigner: AddressLike,
    permissions: IAccountPermissions.SignerPermissionRequestStruct
  ];
  export type OutputTuple = [
    authorizingSigner: string,
    targetSigner: string,
    permissions: IAccountPermissions.SignerPermissionRequestStructOutput
  ];
  export interface OutputObject {
    authorizingSigner: string;
    targetSigner: string;
    permissions: IAccountPermissions.SignerPermissionRequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAccountPermissions extends BaseContract {
  connect(runner?: ContractRunner | null): IAccountPermissions;
  waitForDeployment(): Promise<this>;

  interface: IAccountPermissionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllActiveSigners: TypedContractMethod<
    [],
    [IAccountPermissions.SignerPermissionsStructOutput[]],
    "view"
  >;

  getAllAdmins: TypedContractMethod<[], [string[]], "view">;

  getAllSigners: TypedContractMethod<
    [],
    [IAccountPermissions.SignerPermissionsStructOutput[]],
    "view"
  >;

  getPermissionsForSigner: TypedContractMethod<
    [signer: AddressLike],
    [IAccountPermissions.SignerPermissionsStructOutput],
    "view"
  >;

  isActiveSigner: TypedContractMethod<[signer: AddressLike], [boolean], "view">;

  isAdmin: TypedContractMethod<[signer: AddressLike], [boolean], "view">;

  setPermissionsForSigner: TypedContractMethod<
    [
      req: IAccountPermissions.SignerPermissionRequestStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  verifySignerPermissionRequest: TypedContractMethod<
    [
      req: IAccountPermissions.SignerPermissionRequestStruct,
      signature: BytesLike
    ],
    [[boolean, string] & { success: boolean; signer: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllActiveSigners"
  ): TypedContractMethod<
    [],
    [IAccountPermissions.SignerPermissionsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllSigners"
  ): TypedContractMethod<
    [],
    [IAccountPermissions.SignerPermissionsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionsForSigner"
  ): TypedContractMethod<
    [signer: AddressLike],
    [IAccountPermissions.SignerPermissionsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isActiveSigner"
  ): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setPermissionsForSigner"
  ): TypedContractMethod<
    [
      req: IAccountPermissions.SignerPermissionRequestStruct,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifySignerPermissionRequest"
  ): TypedContractMethod<
    [
      req: IAccountPermissions.SignerPermissionRequestStruct,
      signature: BytesLike
    ],
    [[boolean, string] & { success: boolean; signer: string }],
    "view"
  >;

  getEvent(
    key: "AdminUpdated"
  ): TypedContractEvent<
    AdminUpdatedEvent.InputTuple,
    AdminUpdatedEvent.OutputTuple,
    AdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SignerPermissionsUpdated"
  ): TypedContractEvent<
    SignerPermissionsUpdatedEvent.InputTuple,
    SignerPermissionsUpdatedEvent.OutputTuple,
    SignerPermissionsUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminUpdated(address,bool)": TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;
    AdminUpdated: TypedContractEvent<
      AdminUpdatedEvent.InputTuple,
      AdminUpdatedEvent.OutputTuple,
      AdminUpdatedEvent.OutputObject
    >;

    "SignerPermissionsUpdated(address,address,tuple)": TypedContractEvent<
      SignerPermissionsUpdatedEvent.InputTuple,
      SignerPermissionsUpdatedEvent.OutputTuple,
      SignerPermissionsUpdatedEvent.OutputObject
    >;
    SignerPermissionsUpdated: TypedContractEvent<
      SignerPermissionsUpdatedEvent.InputTuple,
      SignerPermissionsUpdatedEvent.OutputTuple,
      SignerPermissionsUpdatedEvent.OutputObject
    >;
  };
}
