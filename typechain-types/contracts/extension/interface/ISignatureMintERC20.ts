/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISignatureMintERC20 {
  export type MintRequestStruct = {
    to: AddressLike;
    primarySaleRecipient: AddressLike;
    quantity: BigNumberish;
    price: BigNumberish;
    currency: AddressLike;
    validityStartTimestamp: BigNumberish;
    validityEndTimestamp: BigNumberish;
    uid: BytesLike;
  };

  export type MintRequestStructOutput = [
    to: string,
    primarySaleRecipient: string,
    quantity: bigint,
    price: bigint,
    currency: string,
    validityStartTimestamp: bigint,
    validityEndTimestamp: bigint,
    uid: string
  ] & {
    to: string;
    primarySaleRecipient: string;
    quantity: bigint;
    price: bigint;
    currency: string;
    validityStartTimestamp: bigint;
    validityEndTimestamp: bigint;
    uid: string;
  };
}

export interface ISignatureMintERC20Interface extends Interface {
  getFunction(
    nameOrSignature: "mintWithSignature" | "verify"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokensMintedWithSignature"): EventFragment;

  encodeFunctionData(
    functionFragment: "mintWithSignature",
    values: [ISignatureMintERC20.MintRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ISignatureMintERC20.MintRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "mintWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace TokensMintedWithSignatureEvent {
  export type InputTuple = [
    signer: AddressLike,
    mintedTo: AddressLike,
    mintRequest: ISignatureMintERC20.MintRequestStruct
  ];
  export type OutputTuple = [
    signer: string,
    mintedTo: string,
    mintRequest: ISignatureMintERC20.MintRequestStructOutput
  ];
  export interface OutputObject {
    signer: string;
    mintedTo: string;
    mintRequest: ISignatureMintERC20.MintRequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISignatureMintERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): ISignatureMintERC20;
  waitForDeployment(): Promise<this>;

  interface: ISignatureMintERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  mintWithSignature: TypedContractMethod<
    [req: ISignatureMintERC20.MintRequestStruct, signature: BytesLike],
    [string],
    "payable"
  >;

  verify: TypedContractMethod<
    [req: ISignatureMintERC20.MintRequestStruct, signature: BytesLike],
    [[boolean, string] & { success: boolean; signer: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "mintWithSignature"
  ): TypedContractMethod<
    [req: ISignatureMintERC20.MintRequestStruct, signature: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [req: ISignatureMintERC20.MintRequestStruct, signature: BytesLike],
    [[boolean, string] & { success: boolean; signer: string }],
    "view"
  >;

  getEvent(
    key: "TokensMintedWithSignature"
  ): TypedContractEvent<
    TokensMintedWithSignatureEvent.InputTuple,
    TokensMintedWithSignatureEvent.OutputTuple,
    TokensMintedWithSignatureEvent.OutputObject
  >;

  filters: {
    "TokensMintedWithSignature(address,address,tuple)": TypedContractEvent<
      TokensMintedWithSignatureEvent.InputTuple,
      TokensMintedWithSignatureEvent.OutputTuple,
      TokensMintedWithSignatureEvent.OutputObject
    >;
    TokensMintedWithSignature: TypedContractEvent<
      TokensMintedWithSignatureEvent.InputTuple,
      TokensMintedWithSignatureEvent.OutputTuple,
      TokensMintedWithSignatureEvent.OutputObject
    >;
  };
}
