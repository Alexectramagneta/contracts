/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace ISharedMetadataBatch {
  export type SharedMetadataInfoStruct = {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  };

  export type SharedMetadataInfoStructOutput = [
    name: string,
    description: string,
    imageURI: string,
    animationURI: string
  ] & {
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  };

  export type SharedMetadataWithIdStruct = {
    id: BytesLike;
    metadata: ISharedMetadataBatch.SharedMetadataInfoStruct;
  };

  export type SharedMetadataWithIdStructOutput = [
    id: string,
    metadata: ISharedMetadataBatch.SharedMetadataInfoStructOutput
  ] & {
    id: string;
    metadata: ISharedMetadataBatch.SharedMetadataInfoStructOutput;
  };
}

export interface SharedMetadataBatchInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteSharedMetadata"
      | "getAllSharedMetadata"
      | "setSharedMetadata"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SharedMetadataDeleted" | "SharedMetadataUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deleteSharedMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSharedMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSharedMetadata",
    values: [ISharedMetadataBatch.SharedMetadataInfoStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteSharedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSharedMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSharedMetadata",
    data: BytesLike
  ): Result;
}

export namespace SharedMetadataDeletedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharedMetadataUpdatedEvent {
  export type InputTuple = [
    id: BytesLike,
    name: string,
    description: string,
    imageURI: string,
    animationURI: string
  ];
  export type OutputTuple = [
    id: string,
    name: string,
    description: string,
    imageURI: string,
    animationURI: string
  ];
  export interface OutputObject {
    id: string;
    name: string;
    description: string;
    imageURI: string;
    animationURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SharedMetadataBatch extends BaseContract {
  connect(runner?: ContractRunner | null): SharedMetadataBatch;
  waitForDeployment(): Promise<this>;

  interface: SharedMetadataBatchInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteSharedMetadata: TypedContractMethod<
    [_id: BytesLike],
    [void],
    "nonpayable"
  >;

  getAllSharedMetadata: TypedContractMethod<
    [],
    [ISharedMetadataBatch.SharedMetadataWithIdStructOutput[]],
    "view"
  >;

  setSharedMetadata: TypedContractMethod<
    [metadata: ISharedMetadataBatch.SharedMetadataInfoStruct, _id: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteSharedMetadata"
  ): TypedContractMethod<[_id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllSharedMetadata"
  ): TypedContractMethod<
    [],
    [ISharedMetadataBatch.SharedMetadataWithIdStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setSharedMetadata"
  ): TypedContractMethod<
    [metadata: ISharedMetadataBatch.SharedMetadataInfoStruct, _id: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SharedMetadataDeleted"
  ): TypedContractEvent<
    SharedMetadataDeletedEvent.InputTuple,
    SharedMetadataDeletedEvent.OutputTuple,
    SharedMetadataDeletedEvent.OutputObject
  >;
  getEvent(
    key: "SharedMetadataUpdated"
  ): TypedContractEvent<
    SharedMetadataUpdatedEvent.InputTuple,
    SharedMetadataUpdatedEvent.OutputTuple,
    SharedMetadataUpdatedEvent.OutputObject
  >;

  filters: {
    "SharedMetadataDeleted(bytes32)": TypedContractEvent<
      SharedMetadataDeletedEvent.InputTuple,
      SharedMetadataDeletedEvent.OutputTuple,
      SharedMetadataDeletedEvent.OutputObject
    >;
    SharedMetadataDeleted: TypedContractEvent<
      SharedMetadataDeletedEvent.InputTuple,
      SharedMetadataDeletedEvent.OutputTuple,
      SharedMetadataDeletedEvent.OutputObject
    >;

    "SharedMetadataUpdated(bytes32,string,string,string,string)": TypedContractEvent<
      SharedMetadataUpdatedEvent.InputTuple,
      SharedMetadataUpdatedEvent.OutputTuple,
      SharedMetadataUpdatedEvent.OutputObject
    >;
    SharedMetadataUpdated: TypedContractEvent<
      SharedMetadataUpdatedEvent.InputTuple,
      SharedMetadataUpdatedEvent.OutputTuple,
      SharedMetadataUpdatedEvent.OutputObject
    >;
  };
}
