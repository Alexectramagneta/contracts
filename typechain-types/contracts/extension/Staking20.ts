/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface Staking20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "getRewardRatio"
      | "getRewardTokenBalance"
      | "getStakeInfo"
      | "getTimeUnit"
      | "rewardTokenDecimals"
      | "setRewardRatio"
      | "setTimeUnit"
      | "stake"
      | "stakers"
      | "stakersArray"
      | "stakingToken"
      | "stakingTokenBalance"
      | "stakingTokenDecimals"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardsClaimed"
      | "TokensStaked"
      | "TokensWithdrawn"
      | "UpdatedMinStakeAmount"
      | "UpdatedRewardRatio"
      | "UpdatedTimeUnit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [staker: AddressLike, rewardAmount: BigNumberish];
  export type OutputTuple = [staker: string, rewardAmount: bigint];
  export interface OutputObject {
    staker: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedMinStakeAmountEvent {
  export type InputTuple = [oldAmount: BigNumberish, newAmount: BigNumberish];
  export type OutputTuple = [oldAmount: bigint, newAmount: bigint];
  export interface OutputObject {
    oldAmount: bigint;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRewardRatioEvent {
  export type InputTuple = [
    oldNumerator: BigNumberish,
    newNumerator: BigNumberish,
    oldDenominator: BigNumberish,
    newDenominator: BigNumberish
  ];
  export type OutputTuple = [
    oldNumerator: bigint,
    newNumerator: bigint,
    oldDenominator: bigint,
    newDenominator: bigint
  ];
  export interface OutputObject {
    oldNumerator: bigint;
    newNumerator: bigint;
    oldDenominator: bigint;
    newDenominator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedTimeUnitEvent {
  export type InputTuple = [
    oldTimeUnit: BigNumberish,
    newTimeUnit: BigNumberish
  ];
  export type OutputTuple = [oldTimeUnit: bigint, newTimeUnit: bigint];
  export interface OutputObject {
    oldTimeUnit: bigint;
    newTimeUnit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking20 extends BaseContract {
  connect(runner?: ContractRunner | null): Staking20;
  waitForDeployment(): Promise<this>;

  interface: Staking20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  getRewardRatio: TypedContractMethod<
    [],
    [[bigint, bigint] & { _numerator: bigint; _denominator: bigint }],
    "view"
  >;

  getRewardTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getStakeInfo: TypedContractMethod<
    [_staker: AddressLike],
    [[bigint, bigint] & { _tokensStaked: bigint; _rewards: bigint }],
    "view"
  >;

  getTimeUnit: TypedContractMethod<[], [bigint], "view">;

  rewardTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  setRewardRatio: TypedContractMethod<
    [_numerator: BigNumberish, _denominator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimeUnit: TypedContractMethod<
    [_timeUnit: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[_amount: BigNumberish], [void], "payable">;

  stakers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timeOfLastUpdate: bigint;
        conditionIdOflastUpdate: bigint;
        amountStaked: bigint;
        unclaimedRewards: bigint;
      }
    ],
    "view"
  >;

  stakersArray: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  stakingTokenBalance: TypedContractMethod<[], [bigint], "view">;

  stakingTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRewardRatio"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _numerator: bigint; _denominator: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [_staker: AddressLike],
    [[bigint, bigint] & { _tokensStaked: bigint; _rewards: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRewardRatio"
  ): TypedContractMethod<
    [_numerator: BigNumberish, _denominator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeUnit"
  ): TypedContractMethod<[_timeUnit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        timeOfLastUpdate: bigint;
        conditionIdOflastUpdate: bigint;
        amountStaked: bigint;
        unclaimedRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakersArray"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;
  getEvent(
    key: "TokensWithdrawn"
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedMinStakeAmount"
  ): TypedContractEvent<
    UpdatedMinStakeAmountEvent.InputTuple,
    UpdatedMinStakeAmountEvent.OutputTuple,
    UpdatedMinStakeAmountEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRewardRatio"
  ): TypedContractEvent<
    UpdatedRewardRatioEvent.InputTuple,
    UpdatedRewardRatioEvent.OutputTuple,
    UpdatedRewardRatioEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedTimeUnit"
  ): TypedContractEvent<
    UpdatedTimeUnitEvent.InputTuple,
    UpdatedTimeUnitEvent.OutputTuple,
    UpdatedTimeUnitEvent.OutputObject
  >;

  filters: {
    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "TokensStaked(address,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;

    "TokensWithdrawn(address,uint256)": TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;

    "UpdatedMinStakeAmount(uint256,uint256)": TypedContractEvent<
      UpdatedMinStakeAmountEvent.InputTuple,
      UpdatedMinStakeAmountEvent.OutputTuple,
      UpdatedMinStakeAmountEvent.OutputObject
    >;
    UpdatedMinStakeAmount: TypedContractEvent<
      UpdatedMinStakeAmountEvent.InputTuple,
      UpdatedMinStakeAmountEvent.OutputTuple,
      UpdatedMinStakeAmountEvent.OutputObject
    >;

    "UpdatedRewardRatio(uint256,uint256,uint256,uint256)": TypedContractEvent<
      UpdatedRewardRatioEvent.InputTuple,
      UpdatedRewardRatioEvent.OutputTuple,
      UpdatedRewardRatioEvent.OutputObject
    >;
    UpdatedRewardRatio: TypedContractEvent<
      UpdatedRewardRatioEvent.InputTuple,
      UpdatedRewardRatioEvent.OutputTuple,
      UpdatedRewardRatioEvent.OutputObject
    >;

    "UpdatedTimeUnit(uint256,uint256)": TypedContractEvent<
      UpdatedTimeUnitEvent.InputTuple,
      UpdatedTimeUnitEvent.OutputTuple,
      UpdatedTimeUnitEvent.OutputObject
    >;
    UpdatedTimeUnit: TypedContractEvent<
      UpdatedTimeUnitEvent.InputTuple,
      UpdatedTimeUnitEvent.OutputTuple,
      UpdatedTimeUnitEvent.OutputObject
    >;
  };
}
