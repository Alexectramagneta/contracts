/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISignatureAction {
  export type GenericRequestStruct = {
    validityStartTimestamp: BigNumberish;
    validityEndTimestamp: BigNumberish;
    uid: BytesLike;
    data: BytesLike;
  };

  export type GenericRequestStructOutput = [
    validityStartTimestamp: bigint,
    validityEndTimestamp: bigint,
    uid: string,
    data: string
  ] & {
    validityStartTimestamp: bigint;
    validityEndTimestamp: bigint;
    uid: string;
    data: string;
  };
}

export interface SignatureActionInterface extends Interface {
  getFunction(nameOrSignature: "verify"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RequestExecuted"): EventFragment;

  encodeFunctionData(
    functionFragment: "verify",
    values: [ISignatureAction.GenericRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace RequestExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    signer: AddressLike,
    _req: ISignatureAction.GenericRequestStruct
  ];
  export type OutputTuple = [
    user: string,
    signer: string,
    _req: ISignatureAction.GenericRequestStructOutput
  ];
  export interface OutputObject {
    user: string;
    signer: string;
    _req: ISignatureAction.GenericRequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SignatureAction extends BaseContract {
  connect(runner?: ContractRunner | null): SignatureAction;
  waitForDeployment(): Promise<this>;

  interface: SignatureActionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verify: TypedContractMethod<
    [_req: ISignatureAction.GenericRequestStruct, _signature: BytesLike],
    [[boolean, string] & { success: boolean; signer: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [_req: ISignatureAction.GenericRequestStruct, _signature: BytesLike],
    [[boolean, string] & { success: boolean; signer: string }],
    "view"
  >;

  getEvent(
    key: "RequestExecuted"
  ): TypedContractEvent<
    RequestExecutedEvent.InputTuple,
    RequestExecutedEvent.OutputTuple,
    RequestExecutedEvent.OutputObject
  >;

  filters: {
    "RequestExecuted(address,address,tuple)": TypedContractEvent<
      RequestExecutedEvent.InputTuple,
      RequestExecutedEvent.OutputTuple,
      RequestExecutedEvent.OutputObject
    >;
    RequestExecuted: TypedContractEvent<
      RequestExecutedEvent.InputTuple,
      RequestExecutedEvent.OutputTuple,
      RequestExecutedEvent.OutputObject
    >;
  };
}
