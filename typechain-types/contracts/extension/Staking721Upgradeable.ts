/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface Staking721UpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "getRewardTokenBalance"
      | "getRewardsPerUnitTime"
      | "getStakeInfo"
      | "getTimeUnit"
      | "indexedTokens"
      | "isIndexed"
      | "setRewardsPerUnitTime"
      | "setTimeUnit"
      | "stake"
      | "stakerAddress"
      | "stakers"
      | "stakersArray"
      | "stakingToken"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RewardsClaimed"
      | "TokensStaked"
      | "TokensWithdrawn"
      | "UpdatedRewardsPerUnitTime"
      | "UpdatedTimeUnit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsPerUnitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsPerUnitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUnit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsPerUnitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIndexed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsPerUnitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [staker: AddressLike, rewardAmount: BigNumberish];
  export type OutputTuple = [staker: string, rewardAmount: bigint];
  export interface OutputObject {
    staker: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [staker: AddressLike, tokenIds: BigNumberish[]];
  export type OutputTuple = [staker: string, tokenIds: bigint[]];
  export interface OutputObject {
    staker: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [staker: AddressLike, tokenIds: BigNumberish[]];
  export type OutputTuple = [staker: string, tokenIds: bigint[]];
  export interface OutputObject {
    staker: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRewardsPerUnitTimeEvent {
  export type InputTuple = [
    oldRewardsPerUnitTime: BigNumberish,
    newRewardsPerUnitTime: BigNumberish
  ];
  export type OutputTuple = [
    oldRewardsPerUnitTime: bigint,
    newRewardsPerUnitTime: bigint
  ];
  export interface OutputObject {
    oldRewardsPerUnitTime: bigint;
    newRewardsPerUnitTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedTimeUnitEvent {
  export type InputTuple = [
    oldTimeUnit: BigNumberish,
    newTimeUnit: BigNumberish
  ];
  export type OutputTuple = [oldTimeUnit: bigint, newTimeUnit: bigint];
  export interface OutputObject {
    oldTimeUnit: bigint;
    newTimeUnit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking721Upgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): Staking721Upgradeable;
  waitForDeployment(): Promise<this>;

  interface: Staking721UpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  getRewardTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getRewardsPerUnitTime: TypedContractMethod<[], [bigint], "view">;

  getStakeInfo: TypedContractMethod<
    [_staker: AddressLike],
    [[bigint[], bigint] & { _tokensStaked: bigint[]; _rewards: bigint }],
    "view"
  >;

  getTimeUnit: TypedContractMethod<[], [bigint], "view">;

  indexedTokens: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  isIndexed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  setRewardsPerUnitTime: TypedContractMethod<
    [_rewardsPerUnitTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimeUnit: TypedContractMethod<
    [_timeUnit: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[_tokenIds: BigNumberish[]], [void], "nonpayable">;

  stakerAddress: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stakers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amountStaked: bigint;
        conditionIdOflastUpdate: bigint;
        timeOfLastUpdate: bigint;
        unclaimedRewards: bigint;
      }
    ],
    "view"
  >;

  stakersArray: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRewardTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardsPerUnitTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [_staker: AddressLike],
    [[bigint[], bigint] & { _tokensStaked: bigint[]; _rewards: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "indexedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isIndexed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setRewardsPerUnitTime"
  ): TypedContractMethod<
    [_rewardsPerUnitTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeUnit"
  ): TypedContractMethod<[_timeUnit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakerAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amountStaked: bigint;
        conditionIdOflastUpdate: bigint;
        timeOfLastUpdate: bigint;
        unclaimedRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakersArray"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_tokenIds: BigNumberish[]], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;
  getEvent(
    key: "TokensWithdrawn"
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRewardsPerUnitTime"
  ): TypedContractEvent<
    UpdatedRewardsPerUnitTimeEvent.InputTuple,
    UpdatedRewardsPerUnitTimeEvent.OutputTuple,
    UpdatedRewardsPerUnitTimeEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedTimeUnit"
  ): TypedContractEvent<
    UpdatedTimeUnitEvent.InputTuple,
    UpdatedTimeUnitEvent.OutputTuple,
    UpdatedTimeUnitEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "TokensStaked(address,uint256[])": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;

    "TokensWithdrawn(address,uint256[])": TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;

    "UpdatedRewardsPerUnitTime(uint256,uint256)": TypedContractEvent<
      UpdatedRewardsPerUnitTimeEvent.InputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputObject
    >;
    UpdatedRewardsPerUnitTime: TypedContractEvent<
      UpdatedRewardsPerUnitTimeEvent.InputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputTuple,
      UpdatedRewardsPerUnitTimeEvent.OutputObject
    >;

    "UpdatedTimeUnit(uint256,uint256)": TypedContractEvent<
      UpdatedTimeUnitEvent.InputTuple,
      UpdatedTimeUnitEvent.OutputTuple,
      UpdatedTimeUnitEvent.OutputObject
    >;
    UpdatedTimeUnit: TypedContractEvent<
      UpdatedTimeUnitEvent.InputTuple,
      UpdatedTimeUnitEvent.OutputTuple,
      UpdatedTimeUnitEvent.OutputObject
    >;
  };
}
