/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IClaimCondition {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerWallet: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: AddressLike;
    metadata: string;
  };

  export type ClaimConditionStructOutput = [
    startTimestamp: bigint,
    maxClaimableSupply: bigint,
    supplyClaimed: bigint,
    quantityLimitPerWallet: bigint,
    merkleRoot: string,
    pricePerToken: bigint,
    currency: string,
    metadata: string
  ] & {
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerWallet: bigint;
    merkleRoot: string;
    pricePerToken: bigint;
    currency: string;
    metadata: string;
  };
}

export declare namespace IDrop {
  export type AllowlistProofStruct = {
    proof: BytesLike[];
    quantityLimitPerWallet: BigNumberish;
    pricePerToken: BigNumberish;
    currency: AddressLike;
  };

  export type AllowlistProofStructOutput = [
    proof: string[],
    quantityLimitPerWallet: bigint,
    pricePerToken: bigint,
    currency: string
  ] & {
    proof: string[];
    quantityLimitPerWallet: bigint;
    pricePerToken: bigint;
    currency: string;
  };
}

export interface DropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "claimCondition"
      | "getActiveClaimConditionId"
      | "getClaimConditionById"
      | "getSupplyClaimedByWallet"
      | "setClaimConditions"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimConditionsUpdated" | "TokensClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IDrop.AllowlistProofStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveClaimConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimConditionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyClaimedByWallet",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IClaimCondition.ClaimConditionStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IDrop.AllowlistProofStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveClaimConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimConditionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace ClaimConditionsUpdatedEvent {
  export type InputTuple = [
    claimConditions: IClaimCondition.ClaimConditionStruct[],
    resetEligibility: boolean
  ];
  export type OutputTuple = [
    claimConditions: IClaimCondition.ClaimConditionStructOutput[],
    resetEligibility: boolean
  ];
  export interface OutputObject {
    claimConditions: IClaimCondition.ClaimConditionStructOutput[];
    resetEligibility: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    claimConditionIndex: BigNumberish,
    claimer: AddressLike,
    receiver: AddressLike,
    startTokenId: BigNumberish,
    quantityClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimConditionIndex: bigint,
    claimer: string,
    receiver: string,
    startTokenId: bigint,
    quantityClaimed: bigint
  ];
  export interface OutputObject {
    claimConditionIndex: bigint;
    claimer: string;
    receiver: string;
    startTokenId: bigint;
    quantityClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Drop extends BaseContract {
  connect(runner?: ContractRunner | null): Drop;
  waitForDeployment(): Promise<this>;

  interface: DropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [
      _receiver: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  claimCondition: TypedContractMethod<
    [],
    [[bigint, bigint] & { currentStartId: bigint; count: bigint }],
    "view"
  >;

  getActiveClaimConditionId: TypedContractMethod<[], [bigint], "view">;

  getClaimConditionById: TypedContractMethod<
    [_conditionId: BigNumberish],
    [IClaimCondition.ClaimConditionStructOutput],
    "view"
  >;

  getSupplyClaimedByWallet: TypedContractMethod<
    [_conditionId: BigNumberish, _claimer: AddressLike],
    [bigint],
    "view"
  >;

  setClaimConditions: TypedContractMethod<
    [
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;

  verifyClaim: TypedContractMethod<
    [
      _conditionId: BigNumberish,
      _claimer: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimCondition"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { currentStartId: bigint; count: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveClaimConditionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimConditionById"
  ): TypedContractMethod<
    [_conditionId: BigNumberish],
    [IClaimCondition.ClaimConditionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupplyClaimedByWallet"
  ): TypedContractMethod<
    [_conditionId: BigNumberish, _claimer: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setClaimConditions"
  ): TypedContractMethod<
    [
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [
      _conditionId: BigNumberish,
      _claimer: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop.AllowlistProofStruct
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ClaimConditionsUpdated"
  ): TypedContractEvent<
    ClaimConditionsUpdatedEvent.InputTuple,
    ClaimConditionsUpdatedEvent.OutputTuple,
    ClaimConditionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;

  filters: {
    "ClaimConditionsUpdated(tuple[],bool)": TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;
    ClaimConditionsUpdated: TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;

    "TokensClaimed(uint256,address,address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
  };
}
