/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OperatorFiltererInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "OPERATOR_FILTER_REGISTRY"
      | "operatorRestriction"
      | "setOperatorRestriction"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OperatorRestriction"): EventFragment;

  encodeFunctionData(
    functionFragment: "OPERATOR_FILTER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRestriction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorRestriction",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "OPERATOR_FILTER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorRestriction",
    data: BytesLike
  ): Result;
}

export namespace OperatorRestrictionEvent {
  export type InputTuple = [restriction: boolean];
  export type OutputTuple = [restriction: boolean];
  export interface OutputObject {
    restriction: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OperatorFilterer extends BaseContract {
  connect(runner?: ContractRunner | null): OperatorFilterer;
  waitForDeployment(): Promise<this>;

  interface: OperatorFiltererInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  OPERATOR_FILTER_REGISTRY: TypedContractMethod<[], [string], "view">;

  operatorRestriction: TypedContractMethod<[], [boolean], "view">;

  setOperatorRestriction: TypedContractMethod<
    [_restriction: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "OPERATOR_FILTER_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operatorRestriction"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setOperatorRestriction"
  ): TypedContractMethod<[_restriction: boolean], [void], "nonpayable">;

  getEvent(
    key: "OperatorRestriction"
  ): TypedContractEvent<
    OperatorRestrictionEvent.InputTuple,
    OperatorRestrictionEvent.OutputTuple,
    OperatorRestrictionEvent.OutputObject
  >;

  filters: {
    "OperatorRestriction(bool)": TypedContractEvent<
      OperatorRestrictionEvent.InputTuple,
      OperatorRestrictionEvent.OutputTuple,
      OperatorRestrictionEvent.OutputObject
    >;
    OperatorRestriction: TypedContractEvent<
      OperatorRestrictionEvent.InputTuple,
      OperatorRestrictionEvent.OutputTuple,
      OperatorRestrictionEvent.OutputObject
    >;
  };
}
