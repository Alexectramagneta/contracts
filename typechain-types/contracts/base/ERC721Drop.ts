/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IClaimCondition {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerWallet: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: AddressLike;
    metadata: string;
  };

  export type ClaimConditionStructOutput = [
    startTimestamp: bigint,
    maxClaimableSupply: bigint,
    supplyClaimed: bigint,
    quantityLimitPerWallet: bigint,
    merkleRoot: string,
    pricePerToken: bigint,
    currency: string,
    metadata: string
  ] & {
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerWallet: bigint;
    merkleRoot: string;
    pricePerToken: bigint;
    currency: string;
    metadata: string;
  };
}

export declare namespace IDropSinglePhase {
  export type AllowlistProofStruct = {
    proof: BytesLike[];
    quantityLimitPerWallet: BigNumberish;
    pricePerToken: BigNumberish;
    currency: AddressLike;
  };

  export type AllowlistProofStructOutput = [
    proof: string[],
    quantityLimitPerWallet: bigint,
    pricePerToken: bigint,
    currency: string
  ] & {
    proof: string[];
    quantityLimitPerWallet: bigint;
    pricePerToken: bigint;
    currency: string;
  };
}

export interface ERC721DropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "batchFrozen"
      | "burn"
      | "claim"
      | "claimCondition"
      | "contractURI"
      | "encryptDecrypt"
      | "encryptedData"
      | "getApproved"
      | "getBaseURICount"
      | "getBatchIdAtIndex"
      | "getDefaultRoyaltyInfo"
      | "getRevealURI"
      | "getRoyaltyInfoForToken"
      | "getSupplyClaimedByWallet"
      | "isApprovedForAll"
      | "isEncryptedBatch"
      | "lazyMint"
      | "multicall"
      | "name"
      | "nextTokenIdToClaim"
      | "nextTokenIdToMint"
      | "owner"
      | "ownerOf"
      | "primarySaleRecipient"
      | "reveal"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setClaimConditions"
      | "setContractURI"
      | "setDefaultRoyaltyInfo"
      | "setOwner"
      | "setPrimarySaleRecipient"
      | "setRoyaltyInfoForToken"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "ClaimConditionUpdated"
      | "ContractURIUpdated"
      | "DefaultRoyalty"
      | "MetadataFrozen"
      | "OwnerUpdated"
      | "PrimarySaleRecipientUpdated"
      | "RoyaltyForToken"
      | "TokenURIRevealed"
      | "TokensClaimed"
      | "TokensLazyMinted"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFrozen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IDropSinglePhase.AllowlistProofStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptDecrypt",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURICount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRoyaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealURI",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyInfoForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyClaimedByWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEncryptedBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lazyMint",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "primarySaleRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IClaimCondition.ClaimConditionStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyaltyInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimarySaleRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyInfoForToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IDropSinglePhase.AllowlistProofStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptDecrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseURICount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEncryptedBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lazyMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrimarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimConditionUpdatedEvent {
  export type InputTuple = [
    condition: IClaimCondition.ClaimConditionStruct,
    resetEligibility: boolean
  ];
  export type OutputTuple = [
    condition: IClaimCondition.ClaimConditionStructOutput,
    resetEligibility: boolean
  ];
  export interface OutputObject {
    condition: IClaimCondition.ClaimConditionStructOutput;
    resetEligibility: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractURIUpdatedEvent {
  export type InputTuple = [prevURI: string, newURI: string];
  export type OutputTuple = [prevURI: string, newURI: string];
  export interface OutputObject {
    prevURI: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultRoyaltyEvent {
  export type InputTuple = [
    newRoyaltyRecipient: AddressLike,
    newRoyaltyBps: BigNumberish
  ];
  export type OutputTuple = [
    newRoyaltyRecipient: string,
    newRoyaltyBps: bigint
  ];
  export interface OutputObject {
    newRoyaltyRecipient: string;
    newRoyaltyBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataFrozenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [prevOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [prevOwner: string, newOwner: string];
  export interface OutputObject {
    prevOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimarySaleRecipientUpdatedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyForTokenEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    royaltyRecipient: AddressLike,
    royaltyBps: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    royaltyRecipient: string,
    royaltyBps: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    royaltyRecipient: string;
    royaltyBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenURIRevealedEvent {
  export type InputTuple = [index: BigNumberish, revealedURI: string];
  export type OutputTuple = [index: bigint, revealedURI: string];
  export interface OutputObject {
    index: bigint;
    revealedURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    claimer: AddressLike,
    receiver: AddressLike,
    startTokenId: BigNumberish,
    quantityClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimer: string,
    receiver: string,
    startTokenId: bigint,
    quantityClaimed: bigint
  ];
  export interface OutputObject {
    claimer: string;
    receiver: string;
    startTokenId: bigint;
    quantityClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensLazyMintedEvent {
  export type InputTuple = [
    startTokenId: BigNumberish,
    endTokenId: BigNumberish,
    baseURI: string,
    encryptedBaseURI: BytesLike
  ];
  export type OutputTuple = [
    startTokenId: bigint,
    endTokenId: bigint,
    baseURI: string,
    encryptedBaseURI: string
  ];
  export interface OutputObject {
    startTokenId: bigint;
    endTokenId: bigint;
    baseURI: string;
    encryptedBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC721Drop extends BaseContract {
  connect(runner?: ContractRunner | null): ERC721Drop;
  waitForDeployment(): Promise<this>;

  interface: ERC721DropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  batchFrozen: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  burn: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  claim: TypedContractMethod<
    [
      _receiver: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDropSinglePhase.AllowlistProofStruct,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  claimCondition: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, string, bigint, string, string] & {
        startTimestamp: bigint;
        maxClaimableSupply: bigint;
        supplyClaimed: bigint;
        quantityLimitPerWallet: bigint;
        merkleRoot: string;
        pricePerToken: bigint;
        currency: string;
        metadata: string;
      }
    ],
    "view"
  >;

  contractURI: TypedContractMethod<[], [string], "view">;

  encryptDecrypt: TypedContractMethod<
    [data: BytesLike, key: BytesLike],
    [string],
    "view"
  >;

  encryptedData: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getBaseURICount: TypedContractMethod<[], [bigint], "view">;

  getBatchIdAtIndex: TypedContractMethod<
    [_index: BigNumberish],
    [bigint],
    "view"
  >;

  getDefaultRoyaltyInfo: TypedContractMethod<[], [[string, bigint]], "view">;

  getRevealURI: TypedContractMethod<
    [_batchId: BigNumberish, _key: BytesLike],
    [string],
    "view"
  >;

  getRoyaltyInfoForToken: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  getSupplyClaimedByWallet: TypedContractMethod<
    [_claimer: AddressLike],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isEncryptedBatch: TypedContractMethod<
    [_batchId: BigNumberish],
    [boolean],
    "view"
  >;

  lazyMint: TypedContractMethod<
    [_amount: BigNumberish, _baseURIForTokens: string, _data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenIdToClaim: TypedContractMethod<[], [bigint], "view">;

  nextTokenIdToMint: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  primarySaleRecipient: TypedContractMethod<[], [string], "view">;

  reveal: TypedContractMethod<
    [_index: BigNumberish, _key: BytesLike],
    [string],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setClaimConditions: TypedContractMethod<
    [
      _condition: IClaimCondition.ClaimConditionStruct,
      _resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;

  setContractURI: TypedContractMethod<[_uri: string], [void], "nonpayable">;

  setDefaultRoyaltyInfo: TypedContractMethod<
    [_royaltyRecipient: AddressLike, _royaltyBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  setPrimarySaleRecipient: TypedContractMethod<
    [_saleRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyaltyInfoForToken: TypedContractMethod<
    [_tokenId: BigNumberish, _recipient: AddressLike, _bps: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyClaim: TypedContractMethod<
    [
      _claimer: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDropSinglePhase.AllowlistProofStruct
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchFrozen"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDropSinglePhase.AllowlistProofStruct,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimCondition"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, string, bigint, string, string] & {
        startTimestamp: bigint;
        maxClaimableSupply: bigint;
        supplyClaimed: bigint;
        quantityLimitPerWallet: bigint;
        merkleRoot: string;
        pricePerToken: bigint;
        currency: string;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encryptDecrypt"
  ): TypedContractMethod<[data: BytesLike, key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedData"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBaseURICount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBatchIdAtIndex"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDefaultRoyaltyInfo"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getRevealURI"
  ): TypedContractMethod<
    [_batchId: BigNumberish, _key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoyaltyInfoForToken"
  ): TypedContractMethod<[_tokenId: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getSupplyClaimedByWallet"
  ): TypedContractMethod<[_claimer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEncryptedBatch"
  ): TypedContractMethod<[_batchId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lazyMint"
  ): TypedContractMethod<
    [_amount: BigNumberish, _baseURIForTokens: string, _data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenIdToClaim"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTokenIdToMint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "primarySaleRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reveal"
  ): TypedContractMethod<
    [_index: BigNumberish, _key: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimConditions"
  ): TypedContractMethod<
    [
      _condition: IClaimCondition.ClaimConditionStruct,
      _resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultRoyaltyInfo"
  ): TypedContractMethod<
    [_royaltyRecipient: AddressLike, _royaltyBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrimarySaleRecipient"
  ): TypedContractMethod<[_saleRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyInfoForToken"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _recipient: AddressLike, _bps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [
      _claimer: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDropSinglePhase.AllowlistProofStruct
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "ClaimConditionUpdated"
  ): TypedContractEvent<
    ClaimConditionUpdatedEvent.InputTuple,
    ClaimConditionUpdatedEvent.OutputTuple,
    ClaimConditionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractURIUpdated"
  ): TypedContractEvent<
    ContractURIUpdatedEvent.InputTuple,
    ContractURIUpdatedEvent.OutputTuple,
    ContractURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultRoyalty"
  ): TypedContractEvent<
    DefaultRoyaltyEvent.InputTuple,
    DefaultRoyaltyEvent.OutputTuple,
    DefaultRoyaltyEvent.OutputObject
  >;
  getEvent(
    key: "MetadataFrozen"
  ): TypedContractEvent<
    MetadataFrozenEvent.InputTuple,
    MetadataFrozenEvent.OutputTuple,
    MetadataFrozenEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PrimarySaleRecipientUpdated"
  ): TypedContractEvent<
    PrimarySaleRecipientUpdatedEvent.InputTuple,
    PrimarySaleRecipientUpdatedEvent.OutputTuple,
    PrimarySaleRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyForToken"
  ): TypedContractEvent<
    RoyaltyForTokenEvent.InputTuple,
    RoyaltyForTokenEvent.OutputTuple,
    RoyaltyForTokenEvent.OutputObject
  >;
  getEvent(
    key: "TokenURIRevealed"
  ): TypedContractEvent<
    TokenURIRevealedEvent.InputTuple,
    TokenURIRevealedEvent.OutputTuple,
    TokenURIRevealedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensLazyMinted"
  ): TypedContractEvent<
    TokensLazyMintedEvent.InputTuple,
    TokensLazyMintedEvent.OutputTuple,
    TokensLazyMintedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "ClaimConditionUpdated(tuple,bool)": TypedContractEvent<
      ClaimConditionUpdatedEvent.InputTuple,
      ClaimConditionUpdatedEvent.OutputTuple,
      ClaimConditionUpdatedEvent.OutputObject
    >;
    ClaimConditionUpdated: TypedContractEvent<
      ClaimConditionUpdatedEvent.InputTuple,
      ClaimConditionUpdatedEvent.OutputTuple,
      ClaimConditionUpdatedEvent.OutputObject
    >;

    "ContractURIUpdated(string,string)": TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;
    ContractURIUpdated: TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;

    "DefaultRoyalty(address,uint256)": TypedContractEvent<
      DefaultRoyaltyEvent.InputTuple,
      DefaultRoyaltyEvent.OutputTuple,
      DefaultRoyaltyEvent.OutputObject
    >;
    DefaultRoyalty: TypedContractEvent<
      DefaultRoyaltyEvent.InputTuple,
      DefaultRoyaltyEvent.OutputTuple,
      DefaultRoyaltyEvent.OutputObject
    >;

    "MetadataFrozen()": TypedContractEvent<
      MetadataFrozenEvent.InputTuple,
      MetadataFrozenEvent.OutputTuple,
      MetadataFrozenEvent.OutputObject
    >;
    MetadataFrozen: TypedContractEvent<
      MetadataFrozenEvent.InputTuple,
      MetadataFrozenEvent.OutputTuple,
      MetadataFrozenEvent.OutputObject
    >;

    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "PrimarySaleRecipientUpdated(address)": TypedContractEvent<
      PrimarySaleRecipientUpdatedEvent.InputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputObject
    >;
    PrimarySaleRecipientUpdated: TypedContractEvent<
      PrimarySaleRecipientUpdatedEvent.InputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputObject
    >;

    "RoyaltyForToken(uint256,address,uint256)": TypedContractEvent<
      RoyaltyForTokenEvent.InputTuple,
      RoyaltyForTokenEvent.OutputTuple,
      RoyaltyForTokenEvent.OutputObject
    >;
    RoyaltyForToken: TypedContractEvent<
      RoyaltyForTokenEvent.InputTuple,
      RoyaltyForTokenEvent.OutputTuple,
      RoyaltyForTokenEvent.OutputObject
    >;

    "TokenURIRevealed(uint256,string)": TypedContractEvent<
      TokenURIRevealedEvent.InputTuple,
      TokenURIRevealedEvent.OutputTuple,
      TokenURIRevealedEvent.OutputObject
    >;
    TokenURIRevealed: TypedContractEvent<
      TokenURIRevealedEvent.InputTuple,
      TokenURIRevealedEvent.OutputTuple,
      TokenURIRevealedEvent.OutputObject
    >;

    "TokensClaimed(address,address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensLazyMinted(uint256,uint256,string,bytes)": TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;
    TokensLazyMinted: TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
