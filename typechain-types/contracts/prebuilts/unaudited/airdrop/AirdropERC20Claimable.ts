/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface AirdropERC20ClaimableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "airdropTokenAddress"
      | "availableAmount"
      | "claim"
      | "expirationTimestamp"
      | "initialize"
      | "isTrustedForwarder"
      | "merkleRoot"
      | "multicall"
      | "openClaimLimitPerWallet"
      | "supplyClaimedByWallet"
      | "tokenOwner"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "TokensClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "airdropTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike[],
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "openClaimLimitPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyClaimedByWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [AddressLike, BigNumberish, BytesLike[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openClaimLimitPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    claimer: AddressLike,
    receiver: AddressLike,
    quantityClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimer: string,
    receiver: string,
    quantityClaimed: bigint
  ];
  export interface OutputObject {
    claimer: string;
    receiver: string;
    quantityClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirdropERC20Claimable extends BaseContract {
  connect(runner?: ContractRunner | null): AirdropERC20Claimable;
  waitForDeployment(): Promise<this>;

  interface: AirdropERC20ClaimableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  airdropTokenAddress: TypedContractMethod<[], [string], "view">;

  availableAmount: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<
    [
      _receiver: AddressLike,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  expirationTimestamp: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _trustedForwarders: AddressLike[],
      _tokenOwner: AddressLike,
      _airdropTokenAddress: AddressLike,
      _airdropAmount: BigNumberish,
      _expirationTimestamp: BigNumberish,
      _openClaimLimitPerWallet: BigNumberish,
      _merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  openClaimLimitPerWallet: TypedContractMethod<[], [bigint], "view">;

  supplyClaimedByWallet: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  tokenOwner: TypedContractMethod<[], [string], "view">;

  verifyClaim: TypedContractMethod<
    [
      _claimer: AddressLike,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "airdropTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "availableAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expirationTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _trustedForwarders: AddressLike[],
      _tokenOwner: AddressLike,
      _airdropTokenAddress: AddressLike,
      _airdropAmount: BigNumberish,
      _expirationTimestamp: BigNumberish,
      _openClaimLimitPerWallet: BigNumberish,
      _merkleRoot: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "openClaimLimitPerWallet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supplyClaimedByWallet"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [
      _claimer: AddressLike,
      _quantity: BigNumberish,
      _proofs: BytesLike[],
      _proofMaxQuantityForWallet: BigNumberish
    ],
    [void],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "TokensClaimed(address,address,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
  };
}
