/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IEditionStakeInterface extends Interface {
  getFunction(
    nameOrSignature: "depositRewardTokens" | "withdrawRewardTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardTokensDepositedByAdmin"
      | "RewardTokensWithdrawnByAdmin"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositRewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardTokens",
    data: BytesLike
  ): Result;
}

export namespace RewardTokensDepositedByAdminEvent {
  export type InputTuple = [_amount: BigNumberish];
  export type OutputTuple = [_amount: bigint];
  export interface OutputObject {
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardTokensWithdrawnByAdminEvent {
  export type InputTuple = [_amount: BigNumberish];
  export type OutputTuple = [_amount: bigint];
  export interface OutputObject {
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEditionStake extends BaseContract {
  connect(runner?: ContractRunner | null): IEditionStake;
  waitForDeployment(): Promise<this>;

  interface: IEditionStakeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositRewardTokens: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "payable"
  >;

  withdrawRewardTokens: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositRewardTokens"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawRewardTokens"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "RewardTokensDepositedByAdmin"
  ): TypedContractEvent<
    RewardTokensDepositedByAdminEvent.InputTuple,
    RewardTokensDepositedByAdminEvent.OutputTuple,
    RewardTokensDepositedByAdminEvent.OutputObject
  >;
  getEvent(
    key: "RewardTokensWithdrawnByAdmin"
  ): TypedContractEvent<
    RewardTokensWithdrawnByAdminEvent.InputTuple,
    RewardTokensWithdrawnByAdminEvent.OutputTuple,
    RewardTokensWithdrawnByAdminEvent.OutputObject
  >;

  filters: {
    "RewardTokensDepositedByAdmin(uint256)": TypedContractEvent<
      RewardTokensDepositedByAdminEvent.InputTuple,
      RewardTokensDepositedByAdminEvent.OutputTuple,
      RewardTokensDepositedByAdminEvent.OutputObject
    >;
    RewardTokensDepositedByAdmin: TypedContractEvent<
      RewardTokensDepositedByAdminEvent.InputTuple,
      RewardTokensDepositedByAdminEvent.OutputTuple,
      RewardTokensDepositedByAdminEvent.OutputObject
    >;

    "RewardTokensWithdrawnByAdmin(uint256)": TypedContractEvent<
      RewardTokensWithdrawnByAdminEvent.InputTuple,
      RewardTokensWithdrawnByAdminEvent.OutputTuple,
      RewardTokensWithdrawnByAdminEvent.OutputObject
    >;
    RewardTokensWithdrawnByAdmin: TypedContractEvent<
      RewardTokensWithdrawnByAdminEvent.InputTuple,
      RewardTokensWithdrawnByAdminEvent.OutputTuple,
      RewardTokensWithdrawnByAdminEvent.OutputObject
    >;
  };
}
