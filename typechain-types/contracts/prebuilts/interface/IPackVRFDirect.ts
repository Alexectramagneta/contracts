/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ITokenBundle {
  export type TokenStruct = {
    assetContract: AddressLike;
    tokenType: BigNumberish;
    tokenId: BigNumberish;
    totalAmount: BigNumberish;
  };

  export type TokenStructOutput = [
    assetContract: string,
    tokenType: bigint,
    tokenId: bigint,
    totalAmount: bigint
  ] & {
    assetContract: string;
    tokenType: bigint;
    tokenId: bigint;
    totalAmount: bigint;
  };
}

export interface IPackVRFDirectInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canClaimRewards"
      | "claimRewards"
      | "createPack"
      | "openPack"
      | "openPackAndClaimRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PackCreated"
      | "PackOpenRequested"
      | "PackOpened"
      | "PackRandomnessFulfilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canClaimRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPack",
    values: [
      ITokenBundle.TokenStruct[],
      BigNumberish[],
      string,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPack",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPackAndClaimRewards",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "canClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openPack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPackAndClaimRewards",
    data: BytesLike
  ): Result;
}

export namespace PackCreatedEvent {
  export type InputTuple = [
    packId: BigNumberish,
    recipient: AddressLike,
    totalPacksCreated: BigNumberish
  ];
  export type OutputTuple = [
    packId: bigint,
    recipient: string,
    totalPacksCreated: bigint
  ];
  export interface OutputObject {
    packId: bigint;
    recipient: string;
    totalPacksCreated: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackOpenRequestedEvent {
  export type InputTuple = [
    opener: AddressLike,
    packId: BigNumberish,
    amountToOpen: BigNumberish,
    requestId: BigNumberish
  ];
  export type OutputTuple = [
    opener: string,
    packId: bigint,
    amountToOpen: bigint,
    requestId: bigint
  ];
  export interface OutputObject {
    opener: string;
    packId: bigint;
    amountToOpen: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackOpenedEvent {
  export type InputTuple = [
    packId: BigNumberish,
    opener: AddressLike,
    numOfPacksOpened: BigNumberish,
    rewardUnitsDistributed: ITokenBundle.TokenStruct[]
  ];
  export type OutputTuple = [
    packId: bigint,
    opener: string,
    numOfPacksOpened: bigint,
    rewardUnitsDistributed: ITokenBundle.TokenStructOutput[]
  ];
  export interface OutputObject {
    packId: bigint;
    opener: string;
    numOfPacksOpened: bigint;
    rewardUnitsDistributed: ITokenBundle.TokenStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackRandomnessFulfilledEvent {
  export type InputTuple = [packId: BigNumberish, requestId: BigNumberish];
  export type OutputTuple = [packId: bigint, requestId: bigint];
  export interface OutputObject {
    packId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPackVRFDirect extends BaseContract {
  connect(runner?: ContractRunner | null): IPackVRFDirect;
  waitForDeployment(): Promise<this>;

  interface: IPackVRFDirectInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canClaimRewards: TypedContractMethod<
    [_opener: AddressLike],
    [boolean],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [],
    [ITokenBundle.TokenStructOutput[]],
    "nonpayable"
  >;

  createPack: TypedContractMethod<
    [
      contents: ITokenBundle.TokenStruct[],
      numOfRewardUnits: BigNumberish[],
      packUri: string,
      openStartTimestamp: BigNumberish,
      amountDistributedPerOpen: BigNumberish,
      recipient: AddressLike
    ],
    [[bigint, bigint] & { packId: bigint; packTotalSupply: bigint }],
    "payable"
  >;

  openPack: TypedContractMethod<
    [packId: BigNumberish, amountToOpen: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  openPackAndClaimRewards: TypedContractMethod<
    [
      _packId: BigNumberish,
      _amountToOpen: BigNumberish,
      _callBackGasLimit: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canClaimRewards"
  ): TypedContractMethod<[_opener: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [ITokenBundle.TokenStructOutput[]], "nonpayable">;
  getFunction(
    nameOrSignature: "createPack"
  ): TypedContractMethod<
    [
      contents: ITokenBundle.TokenStruct[],
      numOfRewardUnits: BigNumberish[],
      packUri: string,
      openStartTimestamp: BigNumberish,
      amountDistributedPerOpen: BigNumberish,
      recipient: AddressLike
    ],
    [[bigint, bigint] & { packId: bigint; packTotalSupply: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "openPack"
  ): TypedContractMethod<
    [packId: BigNumberish, amountToOpen: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openPackAndClaimRewards"
  ): TypedContractMethod<
    [
      _packId: BigNumberish,
      _amountToOpen: BigNumberish,
      _callBackGasLimit: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "PackCreated"
  ): TypedContractEvent<
    PackCreatedEvent.InputTuple,
    PackCreatedEvent.OutputTuple,
    PackCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PackOpenRequested"
  ): TypedContractEvent<
    PackOpenRequestedEvent.InputTuple,
    PackOpenRequestedEvent.OutputTuple,
    PackOpenRequestedEvent.OutputObject
  >;
  getEvent(
    key: "PackOpened"
  ): TypedContractEvent<
    PackOpenedEvent.InputTuple,
    PackOpenedEvent.OutputTuple,
    PackOpenedEvent.OutputObject
  >;
  getEvent(
    key: "PackRandomnessFulfilled"
  ): TypedContractEvent<
    PackRandomnessFulfilledEvent.InputTuple,
    PackRandomnessFulfilledEvent.OutputTuple,
    PackRandomnessFulfilledEvent.OutputObject
  >;

  filters: {
    "PackCreated(uint256,address,uint256)": TypedContractEvent<
      PackCreatedEvent.InputTuple,
      PackCreatedEvent.OutputTuple,
      PackCreatedEvent.OutputObject
    >;
    PackCreated: TypedContractEvent<
      PackCreatedEvent.InputTuple,
      PackCreatedEvent.OutputTuple,
      PackCreatedEvent.OutputObject
    >;

    "PackOpenRequested(address,uint256,uint256,uint256)": TypedContractEvent<
      PackOpenRequestedEvent.InputTuple,
      PackOpenRequestedEvent.OutputTuple,
      PackOpenRequestedEvent.OutputObject
    >;
    PackOpenRequested: TypedContractEvent<
      PackOpenRequestedEvent.InputTuple,
      PackOpenRequestedEvent.OutputTuple,
      PackOpenRequestedEvent.OutputObject
    >;

    "PackOpened(uint256,address,uint256,tuple[])": TypedContractEvent<
      PackOpenedEvent.InputTuple,
      PackOpenedEvent.OutputTuple,
      PackOpenedEvent.OutputObject
    >;
    PackOpened: TypedContractEvent<
      PackOpenedEvent.InputTuple,
      PackOpenedEvent.OutputTuple,
      PackOpenedEvent.OutputObject
    >;

    "PackRandomnessFulfilled(uint256,uint256)": TypedContractEvent<
      PackRandomnessFulfilledEvent.InputTuple,
      PackRandomnessFulfilledEvent.OutputTuple,
      PackRandomnessFulfilledEvent.OutputObject
    >;
    PackRandomnessFulfilled: TypedContractEvent<
      PackRandomnessFulfilledEvent.InputTuple,
      PackRandomnessFulfilledEvent.OutputTuple,
      PackRandomnessFulfilledEvent.OutputObject
    >;
  };
}
