/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ITokenBundle {
  export type TokenStruct = {
    assetContract: AddressLike;
    tokenType: BigNumberish;
    tokenId: BigNumberish;
    totalAmount: BigNumberish;
  };

  export type TokenStructOutput = [
    assetContract: string,
    tokenType: bigint,
    tokenId: bigint,
    totalAmount: bigint
  ] & {
    assetContract: string;
    tokenType: bigint;
    tokenId: bigint;
    totalAmount: bigint;
  };
}

export interface IMultiwrapInterface extends Interface {
  getFunction(nameOrSignature: "unwrap" | "wrap"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TokensUnwrapped" | "TokensWrapped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [ITokenBundle.TokenStruct[], string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
}

export namespace TokensUnwrappedEvent {
  export type InputTuple = [
    unwrapper: AddressLike,
    recipientOfWrappedContents: AddressLike,
    tokenIdOfWrappedToken: BigNumberish
  ];
  export type OutputTuple = [
    unwrapper: string,
    recipientOfWrappedContents: string,
    tokenIdOfWrappedToken: bigint
  ];
  export interface OutputObject {
    unwrapper: string;
    recipientOfWrappedContents: string;
    tokenIdOfWrappedToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWrappedEvent {
  export type InputTuple = [
    wrapper: AddressLike,
    recipientOfWrappedToken: AddressLike,
    tokenIdOfWrappedToken: BigNumberish,
    wrappedContents: ITokenBundle.TokenStruct[]
  ];
  export type OutputTuple = [
    wrapper: string,
    recipientOfWrappedToken: string,
    tokenIdOfWrappedToken: bigint,
    wrappedContents: ITokenBundle.TokenStructOutput[]
  ];
  export interface OutputObject {
    wrapper: string;
    recipientOfWrappedToken: string;
    tokenIdOfWrappedToken: bigint;
    wrappedContents: ITokenBundle.TokenStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMultiwrap extends BaseContract {
  connect(runner?: ContractRunner | null): IMultiwrap;
  waitForDeployment(): Promise<this>;

  interface: IMultiwrapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  unwrap: TypedContractMethod<
    [tokenId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  wrap: TypedContractMethod<
    [
      wrappedContents: ITokenBundle.TokenStruct[],
      uriForWrappedToken: string,
      recipient: AddressLike
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "unwrap"
  ): TypedContractMethod<
    [tokenId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrap"
  ): TypedContractMethod<
    [
      wrappedContents: ITokenBundle.TokenStruct[],
      uriForWrappedToken: string,
      recipient: AddressLike
    ],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "TokensUnwrapped"
  ): TypedContractEvent<
    TokensUnwrappedEvent.InputTuple,
    TokensUnwrappedEvent.OutputTuple,
    TokensUnwrappedEvent.OutputObject
  >;
  getEvent(
    key: "TokensWrapped"
  ): TypedContractEvent<
    TokensWrappedEvent.InputTuple,
    TokensWrappedEvent.OutputTuple,
    TokensWrappedEvent.OutputObject
  >;

  filters: {
    "TokensUnwrapped(address,address,uint256)": TypedContractEvent<
      TokensUnwrappedEvent.InputTuple,
      TokensUnwrappedEvent.OutputTuple,
      TokensUnwrappedEvent.OutputObject
    >;
    TokensUnwrapped: TypedContractEvent<
      TokensUnwrappedEvent.InputTuple,
      TokensUnwrappedEvent.OutputTuple,
      TokensUnwrappedEvent.OutputObject
    >;

    "TokensWrapped(address,address,uint256,tuple[])": TypedContractEvent<
      TokensWrappedEvent.InputTuple,
      TokensWrappedEvent.OutputTuple,
      TokensWrappedEvent.OutputObject
    >;
    TokensWrapped: TypedContractEvent<
      TokensWrappedEvent.InputTuple,
      TokensWrappedEvent.OutputTuple,
      TokensWrappedEvent.OutputObject
    >;
  };
}
