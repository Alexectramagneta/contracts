/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IClaimCondition {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerWallet: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: AddressLike;
    metadata: string;
  };

  export type ClaimConditionStructOutput = [
    startTimestamp: bigint,
    maxClaimableSupply: bigint,
    supplyClaimed: bigint,
    quantityLimitPerWallet: bigint,
    merkleRoot: string,
    pricePerToken: bigint,
    currency: string,
    metadata: string
  ] & {
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerWallet: bigint;
    merkleRoot: string;
    pricePerToken: bigint;
    currency: string;
    metadata: string;
  };
}

export declare namespace IDrop1155 {
  export type AllowlistProofStruct = {
    proof: BytesLike[];
    quantityLimitPerWallet: BigNumberish;
    pricePerToken: BigNumberish;
    currency: AddressLike;
  };

  export type AllowlistProofStructOutput = [
    proof: string[],
    quantityLimitPerWallet: bigint,
    pricePerToken: bigint,
    currency: string
  ] & {
    proof: string[];
    quantityLimitPerWallet: bigint;
    pricePerToken: bigint;
    currency: string;
  };
}

export interface DropERC1155Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "balanceOf"
      | "balanceOfBatch"
      | "batchFrozen"
      | "burnBatch"
      | "claim"
      | "claimCondition"
      | "contractType"
      | "contractURI"
      | "contractVersion"
      | "freezeBatchBaseURI"
      | "getActiveClaimConditionId"
      | "getBaseURICount"
      | "getBatchIdAtIndex"
      | "getClaimConditionById"
      | "getDefaultRoyaltyInfo"
      | "getFlatPlatformFeeInfo"
      | "getPlatformFeeInfo"
      | "getPlatformFeeType"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoyaltyInfoForToken"
      | "getSupplyClaimedByWallet"
      | "grantRole"
      | "hasRole"
      | "hasRoleWithSwitch"
      | "initialize"
      | "isApprovedForAll"
      | "isTrustedForwarder"
      | "lazyMint"
      | "maxTotalSupply"
      | "multicall"
      | "name"
      | "nextTokenIdToMint"
      | "owner"
      | "primarySaleRecipient"
      | "renounceRole"
      | "revokeRole"
      | "royaltyInfo"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "saleRecipient"
      | "setApprovalForAll"
      | "setClaimConditions"
      | "setContractURI"
      | "setDefaultRoyaltyInfo"
      | "setFlatPlatformFeeInfo"
      | "setMaxTotalSupply"
      | "setOwner"
      | "setPlatformFeeInfo"
      | "setPlatformFeeType"
      | "setPrimarySaleRecipient"
      | "setRoyaltyInfoForToken"
      | "setSaleRecipientForToken"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "updateBatchBaseURI"
      | "uri"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "ClaimConditionsUpdated"
      | "ContractURIUpdated"
      | "DefaultRoyalty"
      | "FlatPlatformFeeUpdated"
      | "Initialized"
      | "MaxTotalSupplyUpdated"
      | "MetadataFrozen"
      | "OwnerUpdated"
      | "PlatformFeeInfoUpdated"
      | "PlatformFeeTypeUpdated"
      | "PrimarySaleRecipientUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoyaltyForToken"
      | "SaleRecipientForTokenUpdated"
      | "TokensClaimed"
      | "TokensLazyMinted"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFrozen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IDrop1155.AllowlistProofStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCondition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeBatchBaseURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveClaimConditionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseURICount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimConditionById",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRoyaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlatPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyInfoForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyClaimedByWallet",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRoleWithSwitch",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      string,
      string,
      string,
      AddressLike[],
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lazyMint",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenIdToMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "primarySaleRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "saleRecipient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [BigNumberish, IClaimCondition.ClaimConditionStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRoyaltyInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlatPlatformFeeInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimarySaleRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyInfoForToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleRecipientForToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBatchBaseURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IDrop1155.AllowlistProofStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeBatchBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveClaimConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseURICount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimConditionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlatPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyClaimedByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRoleWithSwitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lazyMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenIdToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlatPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimarySaleRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyInfoForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleRecipientForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBatchBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimConditionsUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    claimConditions: IClaimCondition.ClaimConditionStruct[],
    resetEligibility: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    claimConditions: IClaimCondition.ClaimConditionStructOutput[],
    resetEligibility: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    claimConditions: IClaimCondition.ClaimConditionStructOutput[];
    resetEligibility: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractURIUpdatedEvent {
  export type InputTuple = [prevURI: string, newURI: string];
  export type OutputTuple = [prevURI: string, newURI: string];
  export interface OutputObject {
    prevURI: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultRoyaltyEvent {
  export type InputTuple = [
    newRoyaltyRecipient: AddressLike,
    newRoyaltyBps: BigNumberish
  ];
  export type OutputTuple = [
    newRoyaltyRecipient: string,
    newRoyaltyBps: bigint
  ];
  export interface OutputObject {
    newRoyaltyRecipient: string;
    newRoyaltyBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlatPlatformFeeUpdatedEvent {
  export type InputTuple = [
    platformFeeRecipient: AddressLike,
    flatFee: BigNumberish
  ];
  export type OutputTuple = [platformFeeRecipient: string, flatFee: bigint];
  export interface OutputObject {
    platformFeeRecipient: string;
    flatFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTotalSupplyUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    maxTotalSupply: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, maxTotalSupply: bigint];
  export interface OutputObject {
    tokenId: bigint;
    maxTotalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataFrozenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [prevOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [prevOwner: string, newOwner: string];
  export interface OutputObject {
    prevOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeInfoUpdatedEvent {
  export type InputTuple = [
    platformFeeRecipient: AddressLike,
    platformFeeBps: BigNumberish
  ];
  export type OutputTuple = [
    platformFeeRecipient: string,
    platformFeeBps: bigint
  ];
  export interface OutputObject {
    platformFeeRecipient: string;
    platformFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeTypeUpdatedEvent {
  export type InputTuple = [feeType: BigNumberish];
  export type OutputTuple = [feeType: bigint];
  export interface OutputObject {
    feeType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimarySaleRecipientUpdatedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyForTokenEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    royaltyRecipient: AddressLike,
    royaltyBps: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    royaltyRecipient: string,
    royaltyBps: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    royaltyRecipient: string;
    royaltyBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleRecipientForTokenUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, saleRecipient: AddressLike];
  export type OutputTuple = [tokenId: bigint, saleRecipient: string];
  export interface OutputObject {
    tokenId: bigint;
    saleRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    claimConditionIndex: BigNumberish,
    claimer: AddressLike,
    receiver: AddressLike,
    tokenId: BigNumberish,
    quantityClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimConditionIndex: bigint,
    claimer: string,
    receiver: string,
    tokenId: bigint,
    quantityClaimed: bigint
  ];
  export interface OutputObject {
    claimConditionIndex: bigint;
    claimer: string;
    receiver: string;
    tokenId: bigint;
    quantityClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensLazyMintedEvent {
  export type InputTuple = [
    startTokenId: BigNumberish,
    endTokenId: BigNumberish,
    baseURI: string,
    encryptedBaseURI: BytesLike
  ];
  export type OutputTuple = [
    startTokenId: bigint,
    endTokenId: bigint,
    baseURI: string,
    encryptedBaseURI: string
  ];
  export interface OutputObject {
    startTokenId: bigint;
    endTokenId: bigint;
    baseURI: string;
    encryptedBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DropERC1155 extends BaseContract {
  connect(runner?: ContractRunner | null): DropERC1155;
  waitForDeployment(): Promise<this>;

  interface: DropERC1155Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  batchFrozen: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  burnBatch: TypedContractMethod<
    [account: AddressLike, ids: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [
      _receiver: AddressLike,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop1155.AllowlistProofStruct,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  claimCondition: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { currentStartId: bigint; count: bigint }],
    "view"
  >;

  contractType: TypedContractMethod<[], [string], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  contractVersion: TypedContractMethod<[], [bigint], "view">;

  freezeBatchBaseURI: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveClaimConditionId: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getBaseURICount: TypedContractMethod<[], [bigint], "view">;

  getBatchIdAtIndex: TypedContractMethod<
    [_index: BigNumberish],
    [bigint],
    "view"
  >;

  getClaimConditionById: TypedContractMethod<
    [_tokenId: BigNumberish, _conditionId: BigNumberish],
    [IClaimCondition.ClaimConditionStructOutput],
    "view"
  >;

  getDefaultRoyaltyInfo: TypedContractMethod<[], [[string, bigint]], "view">;

  getFlatPlatformFeeInfo: TypedContractMethod<[], [[string, bigint]], "view">;

  getPlatformFeeInfo: TypedContractMethod<[], [[string, bigint]], "view">;

  getPlatformFeeType: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getRoyaltyInfoForToken: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  getSupplyClaimedByWallet: TypedContractMethod<
    [_tokenId: BigNumberish, _conditionId: BigNumberish, _claimer: AddressLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasRoleWithSwitch: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _defaultAdmin: AddressLike,
      _name: string,
      _symbol: string,
      _contractURI: string,
      _trustedForwarders: AddressLike[],
      _saleRecipient: AddressLike,
      _royaltyRecipient: AddressLike,
      _royaltyBps: BigNumberish,
      _platformFeeBps: BigNumberish,
      _platformFeeRecipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  lazyMint: TypedContractMethod<
    [_amount: BigNumberish, _baseURIForTokens: string, _data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  maxTotalSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenIdToMint: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  primarySaleRecipient: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  saleRecipient: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setClaimConditions: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;

  setContractURI: TypedContractMethod<[_uri: string], [void], "nonpayable">;

  setDefaultRoyaltyInfo: TypedContractMethod<
    [_royaltyRecipient: AddressLike, _royaltyBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFlatPlatformFeeInfo: TypedContractMethod<
    [_platformFeeRecipient: AddressLike, _flatFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTotalSupply: TypedContractMethod<
    [_tokenId: BigNumberish, _maxTotalSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  setPlatformFeeInfo: TypedContractMethod<
    [_platformFeeRecipient: AddressLike, _platformFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPlatformFeeType: TypedContractMethod<
    [_feeType: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPrimarySaleRecipient: TypedContractMethod<
    [_saleRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyaltyInfoForToken: TypedContractMethod<
    [_tokenId: BigNumberish, _recipient: AddressLike, _bps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSaleRecipientForToken: TypedContractMethod<
    [_tokenId: BigNumberish, _saleRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  updateBatchBaseURI: TypedContractMethod<
    [_index: BigNumberish, _uri: string],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  verifyClaim: TypedContractMethod<
    [
      _conditionId: BigNumberish,
      _claimer: AddressLike,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop1155.AllowlistProofStruct
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchFrozen"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "burnBatch"
  ): TypedContractMethod<
    [account: AddressLike, ids: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop1155.AllowlistProofStruct,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimCondition"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { currentStartId: bigint; count: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "freezeBatchBaseURI"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveClaimConditionId"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBaseURICount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBatchIdAtIndex"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimConditionById"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _conditionId: BigNumberish],
    [IClaimCondition.ClaimConditionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefaultRoyaltyInfo"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getFlatPlatformFeeInfo"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getPlatformFeeInfo"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getPlatformFeeType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyInfoForToken"
  ): TypedContractMethod<[_tokenId: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getSupplyClaimedByWallet"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _conditionId: BigNumberish, _claimer: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRoleWithSwitch"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _defaultAdmin: AddressLike,
      _name: string,
      _symbol: string,
      _contractURI: string,
      _trustedForwarders: AddressLike[],
      _saleRecipient: AddressLike,
      _royaltyRecipient: AddressLike,
      _royaltyBps: BigNumberish,
      _platformFeeBps: BigNumberish,
      _platformFeeRecipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lazyMint"
  ): TypedContractMethod<
    [_amount: BigNumberish, _baseURIForTokens: string, _data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxTotalSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenIdToMint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primarySaleRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint] & { receiver: string; royaltyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "saleRecipient"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimConditions"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _conditions: IClaimCondition.ClaimConditionStruct[],
      _resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContractURI"
  ): TypedContractMethod<[_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultRoyaltyInfo"
  ): TypedContractMethod<
    [_royaltyRecipient: AddressLike, _royaltyBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFlatPlatformFeeInfo"
  ): TypedContractMethod<
    [_platformFeeRecipient: AddressLike, _flatFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxTotalSupply"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _maxTotalSupply: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeeInfo"
  ): TypedContractMethod<
    [_platformFeeRecipient: AddressLike, _platformFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFeeType"
  ): TypedContractMethod<[_feeType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrimarySaleRecipient"
  ): TypedContractMethod<[_saleRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyInfoForToken"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _recipient: AddressLike, _bps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleRecipientForToken"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _saleRecipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateBatchBaseURI"
  ): TypedContractMethod<
    [_index: BigNumberish, _uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [
      _conditionId: BigNumberish,
      _claimer: AddressLike,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _pricePerToken: BigNumberish,
      _allowlistProof: IDrop1155.AllowlistProofStruct
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "ClaimConditionsUpdated"
  ): TypedContractEvent<
    ClaimConditionsUpdatedEvent.InputTuple,
    ClaimConditionsUpdatedEvent.OutputTuple,
    ClaimConditionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractURIUpdated"
  ): TypedContractEvent<
    ContractURIUpdatedEvent.InputTuple,
    ContractURIUpdatedEvent.OutputTuple,
    ContractURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultRoyalty"
  ): TypedContractEvent<
    DefaultRoyaltyEvent.InputTuple,
    DefaultRoyaltyEvent.OutputTuple,
    DefaultRoyaltyEvent.OutputObject
  >;
  getEvent(
    key: "FlatPlatformFeeUpdated"
  ): TypedContractEvent<
    FlatPlatformFeeUpdatedEvent.InputTuple,
    FlatPlatformFeeUpdatedEvent.OutputTuple,
    FlatPlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTotalSupplyUpdated"
  ): TypedContractEvent<
    MaxTotalSupplyUpdatedEvent.InputTuple,
    MaxTotalSupplyUpdatedEvent.OutputTuple,
    MaxTotalSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataFrozen"
  ): TypedContractEvent<
    MetadataFrozenEvent.InputTuple,
    MetadataFrozenEvent.OutputTuple,
    MetadataFrozenEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeInfoUpdated"
  ): TypedContractEvent<
    PlatformFeeInfoUpdatedEvent.InputTuple,
    PlatformFeeInfoUpdatedEvent.OutputTuple,
    PlatformFeeInfoUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeTypeUpdated"
  ): TypedContractEvent<
    PlatformFeeTypeUpdatedEvent.InputTuple,
    PlatformFeeTypeUpdatedEvent.OutputTuple,
    PlatformFeeTypeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PrimarySaleRecipientUpdated"
  ): TypedContractEvent<
    PrimarySaleRecipientUpdatedEvent.InputTuple,
    PrimarySaleRecipientUpdatedEvent.OutputTuple,
    PrimarySaleRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyForToken"
  ): TypedContractEvent<
    RoyaltyForTokenEvent.InputTuple,
    RoyaltyForTokenEvent.OutputTuple,
    RoyaltyForTokenEvent.OutputObject
  >;
  getEvent(
    key: "SaleRecipientForTokenUpdated"
  ): TypedContractEvent<
    SaleRecipientForTokenUpdatedEvent.InputTuple,
    SaleRecipientForTokenUpdatedEvent.OutputTuple,
    SaleRecipientForTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensLazyMinted"
  ): TypedContractEvent<
    TokensLazyMintedEvent.InputTuple,
    TokensLazyMintedEvent.OutputTuple,
    TokensLazyMintedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "ClaimConditionsUpdated(uint256,tuple[],bool)": TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;
    ClaimConditionsUpdated: TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;

    "ContractURIUpdated(string,string)": TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;
    ContractURIUpdated: TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;

    "DefaultRoyalty(address,uint256)": TypedContractEvent<
      DefaultRoyaltyEvent.InputTuple,
      DefaultRoyaltyEvent.OutputTuple,
      DefaultRoyaltyEvent.OutputObject
    >;
    DefaultRoyalty: TypedContractEvent<
      DefaultRoyaltyEvent.InputTuple,
      DefaultRoyaltyEvent.OutputTuple,
      DefaultRoyaltyEvent.OutputObject
    >;

    "FlatPlatformFeeUpdated(address,uint256)": TypedContractEvent<
      FlatPlatformFeeUpdatedEvent.InputTuple,
      FlatPlatformFeeUpdatedEvent.OutputTuple,
      FlatPlatformFeeUpdatedEvent.OutputObject
    >;
    FlatPlatformFeeUpdated: TypedContractEvent<
      FlatPlatformFeeUpdatedEvent.InputTuple,
      FlatPlatformFeeUpdatedEvent.OutputTuple,
      FlatPlatformFeeUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxTotalSupplyUpdated(uint256,uint256)": TypedContractEvent<
      MaxTotalSupplyUpdatedEvent.InputTuple,
      MaxTotalSupplyUpdatedEvent.OutputTuple,
      MaxTotalSupplyUpdatedEvent.OutputObject
    >;
    MaxTotalSupplyUpdated: TypedContractEvent<
      MaxTotalSupplyUpdatedEvent.InputTuple,
      MaxTotalSupplyUpdatedEvent.OutputTuple,
      MaxTotalSupplyUpdatedEvent.OutputObject
    >;

    "MetadataFrozen()": TypedContractEvent<
      MetadataFrozenEvent.InputTuple,
      MetadataFrozenEvent.OutputTuple,
      MetadataFrozenEvent.OutputObject
    >;
    MetadataFrozen: TypedContractEvent<
      MetadataFrozenEvent.InputTuple,
      MetadataFrozenEvent.OutputTuple,
      MetadataFrozenEvent.OutputObject
    >;

    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "PlatformFeeInfoUpdated(address,uint256)": TypedContractEvent<
      PlatformFeeInfoUpdatedEvent.InputTuple,
      PlatformFeeInfoUpdatedEvent.OutputTuple,
      PlatformFeeInfoUpdatedEvent.OutputObject
    >;
    PlatformFeeInfoUpdated: TypedContractEvent<
      PlatformFeeInfoUpdatedEvent.InputTuple,
      PlatformFeeInfoUpdatedEvent.OutputTuple,
      PlatformFeeInfoUpdatedEvent.OutputObject
    >;

    "PlatformFeeTypeUpdated(uint8)": TypedContractEvent<
      PlatformFeeTypeUpdatedEvent.InputTuple,
      PlatformFeeTypeUpdatedEvent.OutputTuple,
      PlatformFeeTypeUpdatedEvent.OutputObject
    >;
    PlatformFeeTypeUpdated: TypedContractEvent<
      PlatformFeeTypeUpdatedEvent.InputTuple,
      PlatformFeeTypeUpdatedEvent.OutputTuple,
      PlatformFeeTypeUpdatedEvent.OutputObject
    >;

    "PrimarySaleRecipientUpdated(address)": TypedContractEvent<
      PrimarySaleRecipientUpdatedEvent.InputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputObject
    >;
    PrimarySaleRecipientUpdated: TypedContractEvent<
      PrimarySaleRecipientUpdatedEvent.InputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputTuple,
      PrimarySaleRecipientUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoyaltyForToken(uint256,address,uint256)": TypedContractEvent<
      RoyaltyForTokenEvent.InputTuple,
      RoyaltyForTokenEvent.OutputTuple,
      RoyaltyForTokenEvent.OutputObject
    >;
    RoyaltyForToken: TypedContractEvent<
      RoyaltyForTokenEvent.InputTuple,
      RoyaltyForTokenEvent.OutputTuple,
      RoyaltyForTokenEvent.OutputObject
    >;

    "SaleRecipientForTokenUpdated(uint256,address)": TypedContractEvent<
      SaleRecipientForTokenUpdatedEvent.InputTuple,
      SaleRecipientForTokenUpdatedEvent.OutputTuple,
      SaleRecipientForTokenUpdatedEvent.OutputObject
    >;
    SaleRecipientForTokenUpdated: TypedContractEvent<
      SaleRecipientForTokenUpdatedEvent.InputTuple,
      SaleRecipientForTokenUpdatedEvent.OutputTuple,
      SaleRecipientForTokenUpdatedEvent.OutputObject
    >;

    "TokensClaimed(uint256,address,address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensLazyMinted(uint256,uint256,string,bytes)": TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;
    TokensLazyMinted: TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
