/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IEnglishAuctions {
  export type AuctionStruct = {
    auctionId: BigNumberish;
    tokenId: BigNumberish;
    quantity: BigNumberish;
    minimumBidAmount: BigNumberish;
    buyoutBidAmount: BigNumberish;
    timeBufferInSeconds: BigNumberish;
    bidBufferBps: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    auctionCreator: AddressLike;
    assetContract: AddressLike;
    currency: AddressLike;
    tokenType: BigNumberish;
    status: BigNumberish;
  };

  export type AuctionStructOutput = [
    auctionId: bigint,
    tokenId: bigint,
    quantity: bigint,
    minimumBidAmount: bigint,
    buyoutBidAmount: bigint,
    timeBufferInSeconds: bigint,
    bidBufferBps: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint,
    auctionCreator: string,
    assetContract: string,
    currency: string,
    tokenType: bigint,
    status: bigint
  ] & {
    auctionId: bigint;
    tokenId: bigint;
    quantity: bigint;
    minimumBidAmount: bigint;
    buyoutBidAmount: bigint;
    timeBufferInSeconds: bigint;
    bidBufferBps: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: bigint;
    status: bigint;
  };

  export type AuctionParametersStruct = {
    assetContract: AddressLike;
    tokenId: BigNumberish;
    quantity: BigNumberish;
    currency: AddressLike;
    minimumBidAmount: BigNumberish;
    buyoutBidAmount: BigNumberish;
    timeBufferInSeconds: BigNumberish;
    bidBufferBps: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
  };

  export type AuctionParametersStructOutput = [
    assetContract: string,
    tokenId: bigint,
    quantity: bigint,
    currency: string,
    minimumBidAmount: bigint,
    buyoutBidAmount: bigint,
    timeBufferInSeconds: bigint,
    bidBufferBps: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint
  ] & {
    assetContract: string;
    tokenId: bigint;
    quantity: bigint;
    currency: string;
    minimumBidAmount: bigint;
    buyoutBidAmount: bigint;
    timeBufferInSeconds: bigint;
    bidBufferBps: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
  };
}

export interface IEnglishAuctionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bidInAuction"
      | "cancelAuction"
      | "collectAuctionPayout"
      | "collectAuctionTokens"
      | "createAuction"
      | "getAllAuctions"
      | "getAllValidAuctions"
      | "getAuction"
      | "getWinningBid"
      | "isAuctionExpired"
      | "isNewWinningBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionClosed"
      | "CancelledAuction"
      | "NewAuction"
      | "NewBid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bidInAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAuctionPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAuctionTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [IEnglishAuctions.AuctionParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValidAuctions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNewWinningBid",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "bidInAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAuctionPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAuctionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllValidAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinningBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNewWinningBid",
    data: BytesLike
  ): Result;
}

export namespace AuctionClosedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    assetContract: AddressLike,
    closer: AddressLike,
    tokenId: BigNumberish,
    auctionCreator: AddressLike,
    winningBidder: AddressLike
  ];
  export type OutputTuple = [
    auctionId: bigint,
    assetContract: string,
    closer: string,
    tokenId: bigint,
    auctionCreator: string,
    winningBidder: string
  ];
  export interface OutputObject {
    auctionId: bigint;
    assetContract: string;
    closer: string;
    tokenId: bigint;
    auctionCreator: string;
    winningBidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelledAuctionEvent {
  export type InputTuple = [
    auctionCreator: AddressLike,
    auctionId: BigNumberish
  ];
  export type OutputTuple = [auctionCreator: string, auctionId: bigint];
  export interface OutputObject {
    auctionCreator: string;
    auctionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAuctionEvent {
  export type InputTuple = [
    auctionCreator: AddressLike,
    auctionId: BigNumberish,
    assetContract: AddressLike,
    auction: IEnglishAuctions.AuctionStruct
  ];
  export type OutputTuple = [
    auctionCreator: string,
    auctionId: bigint,
    assetContract: string,
    auction: IEnglishAuctions.AuctionStructOutput
  ];
  export interface OutputObject {
    auctionCreator: string;
    auctionId: bigint;
    assetContract: string;
    auction: IEnglishAuctions.AuctionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBidEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    assetContract: AddressLike,
    bidAmount: BigNumberish,
    auction: IEnglishAuctions.AuctionStruct
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    assetContract: string,
    bidAmount: bigint,
    auction: IEnglishAuctions.AuctionStructOutput
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    assetContract: string;
    bidAmount: bigint;
    auction: IEnglishAuctions.AuctionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEnglishAuctions extends BaseContract {
  connect(runner?: ContractRunner | null): IEnglishAuctions;
  waitForDeployment(): Promise<this>;

  interface: IEnglishAuctionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bidInAuction: TypedContractMethod<
    [_auctionId: BigNumberish, _bidAmount: BigNumberish],
    [void],
    "payable"
  >;

  cancelAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectAuctionPayout: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectAuctionTokens: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createAuction: TypedContractMethod<
    [_params: IEnglishAuctions.AuctionParametersStruct],
    [bigint],
    "nonpayable"
  >;

  getAllAuctions: TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IEnglishAuctions.AuctionStructOutput[]],
    "view"
  >;

  getAllValidAuctions: TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IEnglishAuctions.AuctionStructOutput[]],
    "view"
  >;

  getAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [IEnglishAuctions.AuctionStructOutput],
    "view"
  >;

  getWinningBid: TypedContractMethod<
    [_auctionId: BigNumberish],
    [
      [string, string, bigint] & {
        bidder: string;
        currency: string;
        bidAmount: bigint;
      }
    ],
    "view"
  >;

  isAuctionExpired: TypedContractMethod<
    [_auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  isNewWinningBid: TypedContractMethod<
    [_auctionId: BigNumberish, _bidAmount: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bidInAuction"
  ): TypedContractMethod<
    [_auctionId: BigNumberish, _bidAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelAuction"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectAuctionPayout"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectAuctionTokens"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [_params: IEnglishAuctions.AuctionParametersStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllAuctions"
  ): TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IEnglishAuctions.AuctionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllValidAuctions"
  ): TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IEnglishAuctions.AuctionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [_auctionId: BigNumberish],
    [IEnglishAuctions.AuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinningBid"
  ): TypedContractMethod<
    [_auctionId: BigNumberish],
    [
      [string, string, bigint] & {
        bidder: string;
        currency: string;
        bidAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuctionExpired"
  ): TypedContractMethod<[_auctionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNewWinningBid"
  ): TypedContractMethod<
    [_auctionId: BigNumberish, _bidAmount: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AuctionClosed"
  ): TypedContractEvent<
    AuctionClosedEvent.InputTuple,
    AuctionClosedEvent.OutputTuple,
    AuctionClosedEvent.OutputObject
  >;
  getEvent(
    key: "CancelledAuction"
  ): TypedContractEvent<
    CancelledAuctionEvent.InputTuple,
    CancelledAuctionEvent.OutputTuple,
    CancelledAuctionEvent.OutputObject
  >;
  getEvent(
    key: "NewAuction"
  ): TypedContractEvent<
    NewAuctionEvent.InputTuple,
    NewAuctionEvent.OutputTuple,
    NewAuctionEvent.OutputObject
  >;
  getEvent(
    key: "NewBid"
  ): TypedContractEvent<
    NewBidEvent.InputTuple,
    NewBidEvent.OutputTuple,
    NewBidEvent.OutputObject
  >;

  filters: {
    "AuctionClosed(uint256,address,address,uint256,address,address)": TypedContractEvent<
      AuctionClosedEvent.InputTuple,
      AuctionClosedEvent.OutputTuple,
      AuctionClosedEvent.OutputObject
    >;
    AuctionClosed: TypedContractEvent<
      AuctionClosedEvent.InputTuple,
      AuctionClosedEvent.OutputTuple,
      AuctionClosedEvent.OutputObject
    >;

    "CancelledAuction(address,uint256)": TypedContractEvent<
      CancelledAuctionEvent.InputTuple,
      CancelledAuctionEvent.OutputTuple,
      CancelledAuctionEvent.OutputObject
    >;
    CancelledAuction: TypedContractEvent<
      CancelledAuctionEvent.InputTuple,
      CancelledAuctionEvent.OutputTuple,
      CancelledAuctionEvent.OutputObject
    >;

    "NewAuction(address,uint256,address,tuple)": TypedContractEvent<
      NewAuctionEvent.InputTuple,
      NewAuctionEvent.OutputTuple,
      NewAuctionEvent.OutputObject
    >;
    NewAuction: TypedContractEvent<
      NewAuctionEvent.InputTuple,
      NewAuctionEvent.OutputTuple,
      NewAuctionEvent.OutputObject
    >;

    "NewBid(uint256,address,address,uint256,tuple)": TypedContractEvent<
      NewBidEvent.InputTuple,
      NewBidEvent.OutputTuple,
      NewBidEvent.OutputObject
    >;
    NewBid: TypedContractEvent<
      NewBidEvent.InputTuple,
      NewBidEvent.OutputTuple,
      NewBidEvent.OutputObject
    >;
  };
}
