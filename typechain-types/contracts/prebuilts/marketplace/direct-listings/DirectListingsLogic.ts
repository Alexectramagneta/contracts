/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IDirectListings {
  export type ListingStruct = {
    listingId: BigNumberish;
    tokenId: BigNumberish;
    quantity: BigNumberish;
    pricePerToken: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    listingCreator: AddressLike;
    assetContract: AddressLike;
    currency: AddressLike;
    tokenType: BigNumberish;
    status: BigNumberish;
    reserved: boolean;
  };

  export type ListingStructOutput = [
    listingId: bigint,
    tokenId: bigint,
    quantity: bigint,
    pricePerToken: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint,
    listingCreator: string,
    assetContract: string,
    currency: string,
    tokenType: bigint,
    status: bigint,
    reserved: boolean
  ] & {
    listingId: bigint;
    tokenId: bigint;
    quantity: bigint;
    pricePerToken: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    listingCreator: string;
    assetContract: string;
    currency: string;
    tokenType: bigint;
    status: bigint;
    reserved: boolean;
  };

  export type ListingParametersStruct = {
    assetContract: AddressLike;
    tokenId: BigNumberish;
    quantity: BigNumberish;
    currency: AddressLike;
    pricePerToken: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    reserved: boolean;
  };

  export type ListingParametersStructOutput = [
    assetContract: string,
    tokenId: bigint,
    quantity: bigint,
    currency: string,
    pricePerToken: bigint,
    startTimestamp: bigint,
    endTimestamp: bigint,
    reserved: boolean
  ] & {
    assetContract: string;
    tokenId: bigint;
    quantity: bigint;
    currency: string;
    pricePerToken: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    reserved: boolean;
  };
}

export interface DirectListingsLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_msgData"
      | "_msgSender"
      | "approveBuyerForListing"
      | "approveCurrencyForListing"
      | "buyFromListing"
      | "cancelListing"
      | "createListing"
      | "currencyPriceForListing"
      | "getAllListings"
      | "getAllValidListings"
      | "getListing"
      | "isBuyerApprovedForListing"
      | "isCurrencyApprovedForListing"
      | "totalListings"
      | "updateListing"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyerApprovedForListing"
      | "CancelledListing"
      | "CurrencyApprovedForListing"
      | "NewListing"
      | "NewSale"
      | "UpdatedListing"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_msgData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_msgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveBuyerForListing",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCurrencyForListing",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFromListing",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [IDirectListings.ListingParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyPriceForListing",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValidListings",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBuyerApprovedForListing",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrencyApprovedForListing",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateListing",
    values: [BigNumberish, IDirectListings.ListingParametersStruct]
  ): string;

  decodeFunctionResult(functionFragment: "_msgData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_msgSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveBuyerForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveCurrencyForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFromListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyPriceForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllValidListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBuyerApprovedForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCurrencyApprovedForListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListing",
    data: BytesLike
  ): Result;
}

export namespace BuyerApprovedForListingEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    buyer: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    listingId: bigint,
    buyer: string,
    approved: boolean
  ];
  export interface OutputObject {
    listingId: bigint;
    buyer: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelledListingEvent {
  export type InputTuple = [
    listingCreator: AddressLike,
    listingId: BigNumberish
  ];
  export type OutputTuple = [listingCreator: string, listingId: bigint];
  export interface OutputObject {
    listingCreator: string;
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurrencyApprovedForListingEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    currency: AddressLike,
    pricePerToken: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    currency: string,
    pricePerToken: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    currency: string;
    pricePerToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewListingEvent {
  export type InputTuple = [
    listingCreator: AddressLike,
    listingId: BigNumberish,
    assetContract: AddressLike,
    listing: IDirectListings.ListingStruct
  ];
  export type OutputTuple = [
    listingCreator: string,
    listingId: bigint,
    assetContract: string,
    listing: IDirectListings.ListingStructOutput
  ];
  export interface OutputObject {
    listingCreator: string;
    listingId: bigint;
    assetContract: string;
    listing: IDirectListings.ListingStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSaleEvent {
  export type InputTuple = [
    listingCreator: AddressLike,
    listingId: BigNumberish,
    assetContract: AddressLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    quantityBought: BigNumberish,
    totalPricePaid: BigNumberish
  ];
  export type OutputTuple = [
    listingCreator: string,
    listingId: bigint,
    assetContract: string,
    tokenId: bigint,
    buyer: string,
    quantityBought: bigint,
    totalPricePaid: bigint
  ];
  export interface OutputObject {
    listingCreator: string;
    listingId: bigint;
    assetContract: string;
    tokenId: bigint;
    buyer: string;
    quantityBought: bigint;
    totalPricePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedListingEvent {
  export type InputTuple = [
    listingCreator: AddressLike,
    listingId: BigNumberish,
    assetContract: AddressLike,
    listing: IDirectListings.ListingStruct
  ];
  export type OutputTuple = [
    listingCreator: string,
    listingId: bigint,
    assetContract: string,
    listing: IDirectListings.ListingStructOutput
  ];
  export interface OutputObject {
    listingCreator: string;
    listingId: bigint;
    assetContract: string;
    listing: IDirectListings.ListingStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DirectListingsLogic extends BaseContract {
  connect(runner?: ContractRunner | null): DirectListingsLogic;
  waitForDeployment(): Promise<this>;

  interface: DirectListingsLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _msgData: TypedContractMethod<[], [string], "view">;

  _msgSender: TypedContractMethod<[], [string], "view">;

  approveBuyerForListing: TypedContractMethod<
    [_listingId: BigNumberish, _buyer: AddressLike, _toApprove: boolean],
    [void],
    "nonpayable"
  >;

  approveCurrencyForListing: TypedContractMethod<
    [
      _listingId: BigNumberish,
      _currency: AddressLike,
      _pricePerTokenInCurrency: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  buyFromListing: TypedContractMethod<
    [
      _listingId: BigNumberish,
      _buyFor: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _expectedTotalPrice: BigNumberish
    ],
    [void],
    "payable"
  >;

  cancelListing: TypedContractMethod<
    [_listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createListing: TypedContractMethod<
    [_params: IDirectListings.ListingParametersStruct],
    [bigint],
    "nonpayable"
  >;

  currencyPriceForListing: TypedContractMethod<
    [_listingId: BigNumberish, _currency: AddressLike],
    [bigint],
    "view"
  >;

  getAllListings: TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IDirectListings.ListingStructOutput[]],
    "view"
  >;

  getAllValidListings: TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IDirectListings.ListingStructOutput[]],
    "view"
  >;

  getListing: TypedContractMethod<
    [_listingId: BigNumberish],
    [IDirectListings.ListingStructOutput],
    "view"
  >;

  isBuyerApprovedForListing: TypedContractMethod<
    [_listingId: BigNumberish, _buyer: AddressLike],
    [boolean],
    "view"
  >;

  isCurrencyApprovedForListing: TypedContractMethod<
    [_listingId: BigNumberish, _currency: AddressLike],
    [boolean],
    "view"
  >;

  totalListings: TypedContractMethod<[], [bigint], "view">;

  updateListing: TypedContractMethod<
    [
      _listingId: BigNumberish,
      _params: IDirectListings.ListingParametersStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_msgData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_msgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveBuyerForListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _buyer: AddressLike, _toApprove: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveCurrencyForListing"
  ): TypedContractMethod<
    [
      _listingId: BigNumberish,
      _currency: AddressLike,
      _pricePerTokenInCurrency: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyFromListing"
  ): TypedContractMethod<
    [
      _listingId: BigNumberish,
      _buyFor: AddressLike,
      _quantity: BigNumberish,
      _currency: AddressLike,
      _expectedTotalPrice: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[_listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createListing"
  ): TypedContractMethod<
    [_params: IDirectListings.ListingParametersStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currencyPriceForListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _currency: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllListings"
  ): TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IDirectListings.ListingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllValidListings"
  ): TypedContractMethod<
    [_startId: BigNumberish, _endId: BigNumberish],
    [IDirectListings.ListingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish],
    [IDirectListings.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBuyerApprovedForListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _buyer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCurrencyApprovedForListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _currency: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalListings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateListing"
  ): TypedContractMethod<
    [
      _listingId: BigNumberish,
      _params: IDirectListings.ListingParametersStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BuyerApprovedForListing"
  ): TypedContractEvent<
    BuyerApprovedForListingEvent.InputTuple,
    BuyerApprovedForListingEvent.OutputTuple,
    BuyerApprovedForListingEvent.OutputObject
  >;
  getEvent(
    key: "CancelledListing"
  ): TypedContractEvent<
    CancelledListingEvent.InputTuple,
    CancelledListingEvent.OutputTuple,
    CancelledListingEvent.OutputObject
  >;
  getEvent(
    key: "CurrencyApprovedForListing"
  ): TypedContractEvent<
    CurrencyApprovedForListingEvent.InputTuple,
    CurrencyApprovedForListingEvent.OutputTuple,
    CurrencyApprovedForListingEvent.OutputObject
  >;
  getEvent(
    key: "NewListing"
  ): TypedContractEvent<
    NewListingEvent.InputTuple,
    NewListingEvent.OutputTuple,
    NewListingEvent.OutputObject
  >;
  getEvent(
    key: "NewSale"
  ): TypedContractEvent<
    NewSaleEvent.InputTuple,
    NewSaleEvent.OutputTuple,
    NewSaleEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedListing"
  ): TypedContractEvent<
    UpdatedListingEvent.InputTuple,
    UpdatedListingEvent.OutputTuple,
    UpdatedListingEvent.OutputObject
  >;

  filters: {
    "BuyerApprovedForListing(uint256,address,bool)": TypedContractEvent<
      BuyerApprovedForListingEvent.InputTuple,
      BuyerApprovedForListingEvent.OutputTuple,
      BuyerApprovedForListingEvent.OutputObject
    >;
    BuyerApprovedForListing: TypedContractEvent<
      BuyerApprovedForListingEvent.InputTuple,
      BuyerApprovedForListingEvent.OutputTuple,
      BuyerApprovedForListingEvent.OutputObject
    >;

    "CancelledListing(address,uint256)": TypedContractEvent<
      CancelledListingEvent.InputTuple,
      CancelledListingEvent.OutputTuple,
      CancelledListingEvent.OutputObject
    >;
    CancelledListing: TypedContractEvent<
      CancelledListingEvent.InputTuple,
      CancelledListingEvent.OutputTuple,
      CancelledListingEvent.OutputObject
    >;

    "CurrencyApprovedForListing(uint256,address,uint256)": TypedContractEvent<
      CurrencyApprovedForListingEvent.InputTuple,
      CurrencyApprovedForListingEvent.OutputTuple,
      CurrencyApprovedForListingEvent.OutputObject
    >;
    CurrencyApprovedForListing: TypedContractEvent<
      CurrencyApprovedForListingEvent.InputTuple,
      CurrencyApprovedForListingEvent.OutputTuple,
      CurrencyApprovedForListingEvent.OutputObject
    >;

    "NewListing(address,uint256,address,tuple)": TypedContractEvent<
      NewListingEvent.InputTuple,
      NewListingEvent.OutputTuple,
      NewListingEvent.OutputObject
    >;
    NewListing: TypedContractEvent<
      NewListingEvent.InputTuple,
      NewListingEvent.OutputTuple,
      NewListingEvent.OutputObject
    >;

    "NewSale(address,uint256,address,uint256,address,uint256,uint256)": TypedContractEvent<
      NewSaleEvent.InputTuple,
      NewSaleEvent.OutputTuple,
      NewSaleEvent.OutputObject
    >;
    NewSale: TypedContractEvent<
      NewSaleEvent.InputTuple,
      NewSaleEvent.OutputTuple,
      NewSaleEvent.OutputObject
    >;

    "UpdatedListing(address,uint256,address,tuple)": TypedContractEvent<
      UpdatedListingEvent.InputTuple,
      UpdatedListingEvent.OutputTuple,
      UpdatedListingEvent.OutputObject
    >;
    UpdatedListing: TypedContractEvent<
      UpdatedListingEvent.InputTuple,
      UpdatedListingEvent.OutputTuple,
      UpdatedListingEvent.OutputObject
    >;
  };
}
