/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TWFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "FACTORY_ROLE"
      | "addImplementation"
      | "approval"
      | "approveImplementation"
      | "currentVersion"
      | "deployProxy"
      | "deployProxyByImplementation"
      | "deployProxyDeterministic"
      | "deployer"
      | "getImplementation"
      | "getLatestImplementation"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "implementation"
      | "isTrustedForwarder"
      | "multicall"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ImplementationAdded"
      | "ImplementationApproved"
      | "ProxyDeployed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FACTORY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveImplementation",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentVersion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxyByImplementation",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxyDeterministic",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestImplementation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FACTORY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxyByImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxyDeterministic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace ImplementationAddedEvent {
  export type InputTuple = [
    implementation: AddressLike,
    contractType: BytesLike,
    version: BigNumberish
  ];
  export type OutputTuple = [
    implementation: string,
    contractType: string,
    version: bigint
  ];
  export interface OutputObject {
    implementation: string;
    contractType: string;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImplementationApprovedEvent {
  export type InputTuple = [implementation: AddressLike, isApproved: boolean];
  export type OutputTuple = [implementation: string, isApproved: boolean];
  export interface OutputObject {
    implementation: string;
    isApproved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyDeployedEvent {
  export type InputTuple = [
    implementation: AddressLike,
    proxy: AddressLike,
    deployer: AddressLike
  ];
  export type OutputTuple = [
    implementation: string,
    proxy: string,
    deployer: string
  ];
  export interface OutputObject {
    implementation: string;
    proxy: string;
    deployer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TWFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TWFactory;
  waitForDeployment(): Promise<this>;

  interface: TWFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FACTORY_ROLE: TypedContractMethod<[], [string], "view">;

  addImplementation: TypedContractMethod<
    [_implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  approval: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  approveImplementation: TypedContractMethod<
    [_implementation: AddressLike, _toApprove: boolean],
    [void],
    "nonpayable"
  >;

  currentVersion: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  deployProxy: TypedContractMethod<
    [_type: BytesLike, _data: BytesLike],
    [string],
    "nonpayable"
  >;

  deployProxyByImplementation: TypedContractMethod<
    [_implementation: AddressLike, _data: BytesLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;

  deployProxyDeterministic: TypedContractMethod<
    [_type: BytesLike, _data: BytesLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;

  deployer: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getImplementation: TypedContractMethod<
    [_type: BytesLike, _version: BigNumberish],
    [string],
    "view"
  >;

  getLatestImplementation: TypedContractMethod<
    [_type: BytesLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  implementation: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FACTORY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addImplementation"
  ): TypedContractMethod<[_implementation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approval"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "approveImplementation"
  ): TypedContractMethod<
    [_implementation: AddressLike, _toApprove: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentVersion"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployProxy"
  ): TypedContractMethod<
    [_type: BytesLike, _data: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployProxyByImplementation"
  ): TypedContractMethod<
    [_implementation: AddressLike, _data: BytesLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployProxyDeterministic"
  ): TypedContractMethod<
    [_type: BytesLike, _data: BytesLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployer"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getImplementation"
  ): TypedContractMethod<
    [_type: BytesLike, _version: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestImplementation"
  ): TypedContractMethod<[_type: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "ImplementationAdded"
  ): TypedContractEvent<
    ImplementationAddedEvent.InputTuple,
    ImplementationAddedEvent.OutputTuple,
    ImplementationAddedEvent.OutputObject
  >;
  getEvent(
    key: "ImplementationApproved"
  ): TypedContractEvent<
    ImplementationApprovedEvent.InputTuple,
    ImplementationApprovedEvent.OutputTuple,
    ImplementationApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProxyDeployed"
  ): TypedContractEvent<
    ProxyDeployedEvent.InputTuple,
    ProxyDeployedEvent.OutputTuple,
    ProxyDeployedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ImplementationAdded(address,bytes32,uint256)": TypedContractEvent<
      ImplementationAddedEvent.InputTuple,
      ImplementationAddedEvent.OutputTuple,
      ImplementationAddedEvent.OutputObject
    >;
    ImplementationAdded: TypedContractEvent<
      ImplementationAddedEvent.InputTuple,
      ImplementationAddedEvent.OutputTuple,
      ImplementationAddedEvent.OutputObject
    >;

    "ImplementationApproved(address,bool)": TypedContractEvent<
      ImplementationApprovedEvent.InputTuple,
      ImplementationApprovedEvent.OutputTuple,
      ImplementationApprovedEvent.OutputObject
    >;
    ImplementationApproved: TypedContractEvent<
      ImplementationApprovedEvent.InputTuple,
      ImplementationApprovedEvent.OutputTuple,
      ImplementationApprovedEvent.OutputObject
    >;

    "ProxyDeployed(address,address,address)": TypedContractEvent<
      ProxyDeployedEvent.InputTuple,
      ProxyDeployedEvent.OutputTuple,
      ProxyDeployedEvent.OutputObject
    >;
    ProxyDeployed: TypedContractEvent<
      ProxyDeployedEvent.InputTuple,
      ProxyDeployedEvent.OutputTuple,
      ProxyDeployedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
