/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TWStatelessFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployProxyByImplementation"
      | "isTrustedForwarder"
      | "multicall"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProxyDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "deployProxyByImplementation",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployProxyByImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
}

export namespace ProxyDeployedEvent {
  export type InputTuple = [
    implementation: AddressLike,
    proxy: AddressLike,
    deployer: AddressLike
  ];
  export type OutputTuple = [
    implementation: string,
    proxy: string,
    deployer: string
  ];
  export interface OutputObject {
    implementation: string;
    proxy: string;
    deployer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TWStatelessFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TWStatelessFactory;
  waitForDeployment(): Promise<this>;

  interface: TWStatelessFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployProxyByImplementation: TypedContractMethod<
    [_implementation: AddressLike, _data: BytesLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployProxyByImplementation"
  ): TypedContractMethod<
    [_implementation: AddressLike, _data: BytesLike, _salt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  getEvent(
    key: "ProxyDeployed"
  ): TypedContractEvent<
    ProxyDeployedEvent.InputTuple,
    ProxyDeployedEvent.OutputTuple,
    ProxyDeployedEvent.OutputObject
  >;

  filters: {
    "ProxyDeployed(address,address,address)": TypedContractEvent<
      ProxyDeployedEvent.InputTuple,
      ProxyDeployedEvent.OutputTuple,
      ProxyDeployedEvent.OutputObject
    >;
    ProxyDeployed: TypedContractEvent<
      ProxyDeployedEvent.InputTuple,
      ProxyDeployedEvent.OutputTuple,
      ProxyDeployedEvent.OutputObject
    >;
  };
}
