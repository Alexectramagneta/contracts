/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IContractPublisher {
  export type CustomContractInstanceStruct = {
    contractId: string;
    publishTimestamp: BigNumberish;
    publishMetadataUri: string;
    bytecodeHash: BytesLike;
    implementation: AddressLike;
  };

  export type CustomContractInstanceStructOutput = [
    contractId: string,
    publishTimestamp: bigint,
    publishMetadataUri: string,
    bytecodeHash: string,
    implementation: string
  ] & {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: string;
    implementation: string;
  };
}

export interface ContractPublisherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "getAllPublishedContracts"
      | "getPublishedContract"
      | "getPublishedContractVersions"
      | "getPublishedUriFromCompilerUri"
      | "getPublisherProfileUri"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "isPaused"
      | "isTrustedForwarder"
      | "multicall"
      | "prevPublisher"
      | "publishContract"
      | "renounceRole"
      | "revokeRole"
      | "setPause"
      | "setPrevPublisher"
      | "setPublisherProfileUri"
      | "supportsInterface"
      | "unpublishContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractPublished"
      | "ContractUnpublished"
      | "Paused"
      | "PublisherProfileUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPublishedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishedContract",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishedContractVersions",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishedUriFromCompilerUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublisherProfileUri",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "prevPublisher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishContract",
    values: [AddressLike, string, string, string, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPrevPublisher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublisherProfileUri",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unpublishContract",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPublishedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishedContractVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishedUriFromCompilerUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublisherProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevPublisher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrevPublisher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublisherProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpublishContract",
    data: BytesLike
  ): Result;
}

export namespace ContractPublishedEvent {
  export type InputTuple = [
    operator: AddressLike,
    publisher: AddressLike,
    publishedContract: IContractPublisher.CustomContractInstanceStruct
  ];
  export type OutputTuple = [
    operator: string,
    publisher: string,
    publishedContract: IContractPublisher.CustomContractInstanceStructOutput
  ];
  export interface OutputObject {
    operator: string;
    publisher: string;
    publishedContract: IContractPublisher.CustomContractInstanceStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractUnpublishedEvent {
  export type InputTuple = [
    operator: AddressLike,
    publisher: AddressLike,
    contractId: string
  ];
  export type OutputTuple = [
    operator: string,
    publisher: string,
    contractId: string
  ];
  export interface OutputObject {
    operator: string;
    publisher: string;
    contractId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublisherProfileUpdatedEvent {
  export type InputTuple = [
    publisher: AddressLike,
    prevURI: string,
    newURI: string
  ];
  export type OutputTuple = [
    publisher: string,
    prevURI: string,
    newURI: string
  ];
  export interface OutputObject {
    publisher: string;
    prevURI: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContractPublisher extends BaseContract {
  connect(runner?: ContractRunner | null): ContractPublisher;
  waitForDeployment(): Promise<this>;

  interface: ContractPublisherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  getAllPublishedContracts: TypedContractMethod<
    [_publisher: AddressLike],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;

  getPublishedContract: TypedContractMethod<
    [_publisher: AddressLike, _contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput],
    "view"
  >;

  getPublishedContractVersions: TypedContractMethod<
    [_publisher: AddressLike, _contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;

  getPublishedUriFromCompilerUri: TypedContractMethod<
    [compilerMetadataUri: string],
    [string[]],
    "view"
  >;

  getPublisherProfileUri: TypedContractMethod<
    [publisher: AddressLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  prevPublisher: TypedContractMethod<[], [string], "view">;

  publishContract: TypedContractMethod<
    [
      _publisher: AddressLike,
      _contractId: string,
      _publishMetadataUri: string,
      _compilerMetadataUri: string,
      _bytecodeHash: BytesLike,
      _implementation: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[_pause: boolean], [void], "nonpayable">;

  setPrevPublisher: TypedContractMethod<
    [_prevPublisher: AddressLike],
    [void],
    "nonpayable"
  >;

  setPublisherProfileUri: TypedContractMethod<
    [publisher: AddressLike, uri: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpublishContract: TypedContractMethod<
    [_publisher: AddressLike, _contractId: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllPublishedContracts"
  ): TypedContractMethod<
    [_publisher: AddressLike],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublishedContract"
  ): TypedContractMethod<
    [_publisher: AddressLike, _contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublishedContractVersions"
  ): TypedContractMethod<
    [_publisher: AddressLike, _contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublishedUriFromCompilerUri"
  ): TypedContractMethod<[compilerMetadataUri: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPublisherProfileUri"
  ): TypedContractMethod<[publisher: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "prevPublisher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publishContract"
  ): TypedContractMethod<
    [
      _publisher: AddressLike,
      _contractId: string,
      _publishMetadataUri: string,
      _compilerMetadataUri: string,
      _bytecodeHash: BytesLike,
      _implementation: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrevPublisher"
  ): TypedContractMethod<[_prevPublisher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublisherProfileUri"
  ): TypedContractMethod<
    [publisher: AddressLike, uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpublishContract"
  ): TypedContractMethod<
    [_publisher: AddressLike, _contractId: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContractPublished"
  ): TypedContractEvent<
    ContractPublishedEvent.InputTuple,
    ContractPublishedEvent.OutputTuple,
    ContractPublishedEvent.OutputObject
  >;
  getEvent(
    key: "ContractUnpublished"
  ): TypedContractEvent<
    ContractUnpublishedEvent.InputTuple,
    ContractUnpublishedEvent.OutputTuple,
    ContractUnpublishedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PublisherProfileUpdated"
  ): TypedContractEvent<
    PublisherProfileUpdatedEvent.InputTuple,
    PublisherProfileUpdatedEvent.OutputTuple,
    PublisherProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ContractPublished(address,address,tuple)": TypedContractEvent<
      ContractPublishedEvent.InputTuple,
      ContractPublishedEvent.OutputTuple,
      ContractPublishedEvent.OutputObject
    >;
    ContractPublished: TypedContractEvent<
      ContractPublishedEvent.InputTuple,
      ContractPublishedEvent.OutputTuple,
      ContractPublishedEvent.OutputObject
    >;

    "ContractUnpublished(address,address,string)": TypedContractEvent<
      ContractUnpublishedEvent.InputTuple,
      ContractUnpublishedEvent.OutputTuple,
      ContractUnpublishedEvent.OutputObject
    >;
    ContractUnpublished: TypedContractEvent<
      ContractUnpublishedEvent.InputTuple,
      ContractUnpublishedEvent.OutputTuple,
      ContractUnpublishedEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PublisherProfileUpdated(address,string,string)": TypedContractEvent<
      PublisherProfileUpdatedEvent.InputTuple,
      PublisherProfileUpdatedEvent.OutputTuple,
      PublisherProfileUpdatedEvent.OutputObject
    >;
    PublisherProfileUpdated: TypedContractEvent<
      PublisherProfileUpdatedEvent.InputTuple,
      PublisherProfileUpdatedEvent.OutputTuple,
      PublisherProfileUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
