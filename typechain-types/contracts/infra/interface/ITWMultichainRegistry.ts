/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ITWMultichainRegistry {
  export type DeploymentStruct = {
    deploymentAddress: AddressLike;
    chainId: BigNumberish;
    metadataURI: string;
  };

  export type DeploymentStructOutput = [
    deploymentAddress: string,
    chainId: bigint,
    metadataURI: string
  ] & { deploymentAddress: string; chainId: bigint; metadataURI: string };
}

export interface ITWMultichainRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "add" | "count" | "getAll" | "getMetadataUri" | "remove"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Added" | "Deleted"): EventFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "count", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "getAll", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getMetadataUri",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
}

export namespace AddedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    deployment: AddressLike,
    chainId: BigNumberish,
    metadataUri: string
  ];
  export type OutputTuple = [
    deployer: string,
    deployment: string,
    chainId: bigint,
    metadataUri: string
  ];
  export interface OutputObject {
    deployer: string;
    deployment: string;
    chainId: bigint;
    metadataUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeletedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    deployment: AddressLike,
    chainId: BigNumberish
  ];
  export type OutputTuple = [
    deployer: string,
    deployment: string,
    chainId: bigint
  ];
  export interface OutputObject {
    deployer: string;
    deployment: string;
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITWMultichainRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ITWMultichainRegistry;
  waitForDeployment(): Promise<this>;

  interface: ITWMultichainRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [
      _deployer: AddressLike,
      _deployment: AddressLike,
      _chainId: BigNumberish,
      metadataUri: string
    ],
    [void],
    "nonpayable"
  >;

  count: TypedContractMethod<[_deployer: AddressLike], [bigint], "view">;

  getAll: TypedContractMethod<
    [_deployer: AddressLike],
    [ITWMultichainRegistry.DeploymentStructOutput[]],
    "view"
  >;

  getMetadataUri: TypedContractMethod<
    [_chainId: BigNumberish, _deployment: AddressLike],
    [string],
    "view"
  >;

  remove: TypedContractMethod<
    [_deployer: AddressLike, _deployment: AddressLike, _chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [
      _deployer: AddressLike,
      _deployment: AddressLike,
      _chainId: BigNumberish,
      metadataUri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[_deployer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAll"
  ): TypedContractMethod<
    [_deployer: AddressLike],
    [ITWMultichainRegistry.DeploymentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMetadataUri"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _deployment: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<
    [_deployer: AddressLike, _deployment: AddressLike, _chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Added"
  ): TypedContractEvent<
    AddedEvent.InputTuple,
    AddedEvent.OutputTuple,
    AddedEvent.OutputObject
  >;
  getEvent(
    key: "Deleted"
  ): TypedContractEvent<
    DeletedEvent.InputTuple,
    DeletedEvent.OutputTuple,
    DeletedEvent.OutputObject
  >;

  filters: {
    "Added(address,address,uint256,string)": TypedContractEvent<
      AddedEvent.InputTuple,
      AddedEvent.OutputTuple,
      AddedEvent.OutputObject
    >;
    Added: TypedContractEvent<
      AddedEvent.InputTuple,
      AddedEvent.OutputTuple,
      AddedEvent.OutputObject
    >;

    "Deleted(address,address,uint256)": TypedContractEvent<
      DeletedEvent.InputTuple,
      DeletedEvent.OutputTuple,
      DeletedEvent.OutputObject
    >;
    Deleted: TypedContractEvent<
      DeletedEvent.InputTuple,
      DeletedEvent.OutputTuple,
      DeletedEvent.OutputObject
    >;
  };
}
