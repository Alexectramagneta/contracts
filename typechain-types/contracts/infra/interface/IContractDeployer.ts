/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IContractDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployInstance"
      | "deployInstanceProxy"
      | "getContractDeployer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ContractDeployed" | "Paused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployInstance",
    values: [AddressLike, BytesLike, BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployInstanceProxy",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDeployer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployInstanceProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDeployer",
    data: BytesLike
  ): Result;
}

export namespace ContractDeployedEvent {
  export type InputTuple = [
    deployer: AddressLike,
    publisher: AddressLike,
    deployedContract: AddressLike
  ];
  export type OutputTuple = [
    deployer: string,
    publisher: string,
    deployedContract: string
  ];
  export interface OutputObject {
    deployer: string;
    publisher: string;
    deployedContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IContractDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): IContractDeployer;
  waitForDeployment(): Promise<this>;

  interface: IContractDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployInstance: TypedContractMethod<
    [
      publisher: AddressLike,
      contractBytecode: BytesLike,
      constructorArgs: BytesLike,
      salt: BytesLike,
      value: BigNumberish,
      publishMetadataUri: string
    ],
    [string],
    "nonpayable"
  >;

  deployInstanceProxy: TypedContractMethod<
    [
      publisher: AddressLike,
      implementation: AddressLike,
      initializeData: BytesLike,
      salt: BytesLike,
      value: BigNumberish,
      publishMetadataUri: string
    ],
    [string],
    "nonpayable"
  >;

  getContractDeployer: TypedContractMethod<
    [_contract: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployInstance"
  ): TypedContractMethod<
    [
      publisher: AddressLike,
      contractBytecode: BytesLike,
      constructorArgs: BytesLike,
      salt: BytesLike,
      value: BigNumberish,
      publishMetadataUri: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployInstanceProxy"
  ): TypedContractMethod<
    [
      publisher: AddressLike,
      implementation: AddressLike,
      initializeData: BytesLike,
      salt: BytesLike,
      value: BigNumberish,
      publishMetadataUri: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContractDeployer"
  ): TypedContractMethod<[_contract: AddressLike], [string], "view">;

  getEvent(
    key: "ContractDeployed"
  ): TypedContractEvent<
    ContractDeployedEvent.InputTuple,
    ContractDeployedEvent.OutputTuple,
    ContractDeployedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;

  filters: {
    "ContractDeployed(address,address,address)": TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;
    ContractDeployed: TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
  };
}
