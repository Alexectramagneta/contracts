/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IContractPublisher {
  export type CustomContractInstanceStruct = {
    contractId: string;
    publishTimestamp: BigNumberish;
    publishMetadataUri: string;
    bytecodeHash: BytesLike;
    implementation: AddressLike;
  };

  export type CustomContractInstanceStructOutput = [
    contractId: string,
    publishTimestamp: bigint,
    publishMetadataUri: string,
    bytecodeHash: string,
    implementation: string
  ] & {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: string;
    implementation: string;
  };
}

export interface IContractPublisherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllPublishedContracts"
      | "getPublishedContract"
      | "getPublishedContractVersions"
      | "getPublishedUriFromCompilerUri"
      | "getPublisherProfileUri"
      | "publishContract"
      | "setPublisherProfileUri"
      | "unpublishContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractPublished"
      | "ContractUnpublished"
      | "Paused"
      | "PublisherProfileUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllPublishedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishedContract",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishedContractVersions",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishedUriFromCompilerUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublisherProfileUri",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishContract",
    values: [AddressLike, string, string, string, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublisherProfileUri",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpublishContract",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllPublishedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishedContractVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishedUriFromCompilerUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublisherProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublisherProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpublishContract",
    data: BytesLike
  ): Result;
}

export namespace ContractPublishedEvent {
  export type InputTuple = [
    operator: AddressLike,
    publisher: AddressLike,
    publishedContract: IContractPublisher.CustomContractInstanceStruct
  ];
  export type OutputTuple = [
    operator: string,
    publisher: string,
    publishedContract: IContractPublisher.CustomContractInstanceStructOutput
  ];
  export interface OutputObject {
    operator: string;
    publisher: string;
    publishedContract: IContractPublisher.CustomContractInstanceStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractUnpublishedEvent {
  export type InputTuple = [
    operator: AddressLike,
    publisher: AddressLike,
    contractId: string
  ];
  export type OutputTuple = [
    operator: string,
    publisher: string,
    contractId: string
  ];
  export interface OutputObject {
    operator: string;
    publisher: string;
    contractId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublisherProfileUpdatedEvent {
  export type InputTuple = [
    publisher: AddressLike,
    prevURI: string,
    newURI: string
  ];
  export type OutputTuple = [
    publisher: string,
    prevURI: string,
    newURI: string
  ];
  export interface OutputObject {
    publisher: string;
    prevURI: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IContractPublisher extends BaseContract {
  connect(runner?: ContractRunner | null): IContractPublisher;
  waitForDeployment(): Promise<this>;

  interface: IContractPublisherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllPublishedContracts: TypedContractMethod<
    [publisher: AddressLike],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;

  getPublishedContract: TypedContractMethod<
    [publisher: AddressLike, contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput],
    "view"
  >;

  getPublishedContractVersions: TypedContractMethod<
    [publisher: AddressLike, contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;

  getPublishedUriFromCompilerUri: TypedContractMethod<
    [compilerMetadataUri: string],
    [string[]],
    "view"
  >;

  getPublisherProfileUri: TypedContractMethod<
    [publisher: AddressLike],
    [string],
    "view"
  >;

  publishContract: TypedContractMethod<
    [
      publisher: AddressLike,
      contractId: string,
      publishMetadataUri: string,
      compilerMetadataUri: string,
      bytecodeHash: BytesLike,
      implementation: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setPublisherProfileUri: TypedContractMethod<
    [publisher: AddressLike, uri: string],
    [void],
    "nonpayable"
  >;

  unpublishContract: TypedContractMethod<
    [publisher: AddressLike, contractId: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllPublishedContracts"
  ): TypedContractMethod<
    [publisher: AddressLike],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublishedContract"
  ): TypedContractMethod<
    [publisher: AddressLike, contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublishedContractVersions"
  ): TypedContractMethod<
    [publisher: AddressLike, contractId: string],
    [IContractPublisher.CustomContractInstanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublishedUriFromCompilerUri"
  ): TypedContractMethod<[compilerMetadataUri: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPublisherProfileUri"
  ): TypedContractMethod<[publisher: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "publishContract"
  ): TypedContractMethod<
    [
      publisher: AddressLike,
      contractId: string,
      publishMetadataUri: string,
      compilerMetadataUri: string,
      bytecodeHash: BytesLike,
      implementation: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPublisherProfileUri"
  ): TypedContractMethod<
    [publisher: AddressLike, uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpublishContract"
  ): TypedContractMethod<
    [publisher: AddressLike, contractId: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContractPublished"
  ): TypedContractEvent<
    ContractPublishedEvent.InputTuple,
    ContractPublishedEvent.OutputTuple,
    ContractPublishedEvent.OutputObject
  >;
  getEvent(
    key: "ContractUnpublished"
  ): TypedContractEvent<
    ContractUnpublishedEvent.InputTuple,
    ContractUnpublishedEvent.OutputTuple,
    ContractUnpublishedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PublisherProfileUpdated"
  ): TypedContractEvent<
    PublisherProfileUpdatedEvent.InputTuple,
    PublisherProfileUpdatedEvent.OutputTuple,
    PublisherProfileUpdatedEvent.OutputObject
  >;

  filters: {
    "ContractPublished(address,address,tuple)": TypedContractEvent<
      ContractPublishedEvent.InputTuple,
      ContractPublishedEvent.OutputTuple,
      ContractPublishedEvent.OutputObject
    >;
    ContractPublished: TypedContractEvent<
      ContractPublishedEvent.InputTuple,
      ContractPublishedEvent.OutputTuple,
      ContractPublishedEvent.OutputObject
    >;

    "ContractUnpublished(address,address,string)": TypedContractEvent<
      ContractUnpublishedEvent.InputTuple,
      ContractUnpublishedEvent.OutputTuple,
      ContractUnpublishedEvent.OutputObject
    >;
    ContractUnpublished: TypedContractEvent<
      ContractUnpublishedEvent.InputTuple,
      ContractUnpublishedEvent.OutputTuple,
      ContractUnpublishedEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PublisherProfileUpdated(address,string,string)": TypedContractEvent<
      PublisherProfileUpdatedEvent.InputTuple,
      PublisherProfileUpdatedEvent.OutputTuple,
      PublisherProfileUpdatedEvent.OutputObject
    >;
    PublisherProfileUpdated: TypedContractEvent<
      PublisherProfileUpdatedEvent.InputTuple,
      PublisherProfileUpdatedEvent.OutputTuple,
      PublisherProfileUpdatedEvent.OutputObject
    >;
  };
}
