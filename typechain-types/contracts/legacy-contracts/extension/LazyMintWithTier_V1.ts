/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace LazyMintWithTier_V1 {
  export type TokenRangeStruct = {
    startIdInclusive: BigNumberish;
    endIdNonInclusive: BigNumberish;
  };

  export type TokenRangeStructOutput = [
    startIdInclusive: bigint,
    endIdNonInclusive: bigint
  ] & { startIdInclusive: bigint; endIdNonInclusive: bigint };

  export type TierMetadataStruct = {
    tier: string;
    ranges: LazyMintWithTier_V1.TokenRangeStruct[];
    baseURIs: string[];
  };

  export type TierMetadataStructOutput = [
    tier: string,
    ranges: LazyMintWithTier_V1.TokenRangeStructOutput[],
    baseURIs: string[]
  ] & {
    tier: string;
    ranges: LazyMintWithTier_V1.TokenRangeStructOutput[];
    baseURIs: string[];
  };
}

export interface LazyMintWithTier_V1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBaseURICount"
      | "getBatchIdAtIndex"
      | "getMetadataForAllTiers"
      | "lazyMint"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokensLazyMinted"): EventFragment;

  encodeFunctionData(
    functionFragment: "getBaseURICount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataForAllTiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lazyMint",
    values: [BigNumberish, string, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBaseURICount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataForAllTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lazyMint", data: BytesLike): Result;
}

export namespace TokensLazyMintedEvent {
  export type InputTuple = [
    tier: string,
    startTokenId: BigNumberish,
    endTokenId: BigNumberish,
    baseURI: string,
    encryptedBaseURI: BytesLike
  ];
  export type OutputTuple = [
    tier: string,
    startTokenId: bigint,
    endTokenId: bigint,
    baseURI: string,
    encryptedBaseURI: string
  ];
  export interface OutputObject {
    tier: string;
    startTokenId: bigint;
    endTokenId: bigint;
    baseURI: string;
    encryptedBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LazyMintWithTier_V1 extends BaseContract {
  connect(runner?: ContractRunner | null): LazyMintWithTier_V1;
  waitForDeployment(): Promise<this>;

  interface: LazyMintWithTier_V1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBaseURICount: TypedContractMethod<[], [bigint], "view">;

  getBatchIdAtIndex: TypedContractMethod<
    [_index: BigNumberish],
    [bigint],
    "view"
  >;

  getMetadataForAllTiers: TypedContractMethod<
    [],
    [LazyMintWithTier_V1.TierMetadataStructOutput[]],
    "view"
  >;

  lazyMint: TypedContractMethod<
    [
      _amount: BigNumberish,
      _baseURIForTokens: string,
      _tier: string,
      _data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBaseURICount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBatchIdAtIndex"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMetadataForAllTiers"
  ): TypedContractMethod<
    [],
    [LazyMintWithTier_V1.TierMetadataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "lazyMint"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _baseURIForTokens: string,
      _tier: string,
      _data: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "TokensLazyMinted"
  ): TypedContractEvent<
    TokensLazyMintedEvent.InputTuple,
    TokensLazyMintedEvent.OutputTuple,
    TokensLazyMintedEvent.OutputObject
  >;

  filters: {
    "TokensLazyMinted(string,uint256,uint256,string,bytes)": TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;
    TokensLazyMinted: TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;
  };
}
