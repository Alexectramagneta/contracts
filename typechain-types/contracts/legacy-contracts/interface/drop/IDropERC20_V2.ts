/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IDropClaimCondition_V2 {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerTransaction: BigNumberish;
    waitTimeInSecondsBetweenClaims: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: AddressLike;
  };

  export type ClaimConditionStructOutput = [
    startTimestamp: bigint,
    maxClaimableSupply: bigint,
    supplyClaimed: bigint,
    quantityLimitPerTransaction: bigint,
    waitTimeInSecondsBetweenClaims: bigint,
    merkleRoot: string,
    pricePerToken: bigint,
    currency: string
  ] & {
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerTransaction: bigint;
    waitTimeInSecondsBetweenClaims: bigint;
    merkleRoot: string;
    pricePerToken: bigint;
    currency: string;
  };
}

export interface IDropERC20_V2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claim"
      | "setClaimConditions"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ClaimConditionsUpdated"
      | "ContractURIUpdated"
      | "MaxTotalSupplyUpdated"
      | "MaxWalletClaimCountUpdated"
      | "TokensClaimed"
      | "Transfer"
      | "WalletClaimCountUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IDropClaimCondition_V2.ClaimConditionStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimConditionsUpdatedEvent {
  export type InputTuple = [
    claimConditions: IDropClaimCondition_V2.ClaimConditionStruct[]
  ];
  export type OutputTuple = [
    claimConditions: IDropClaimCondition_V2.ClaimConditionStructOutput[]
  ];
  export interface OutputObject {
    claimConditions: IDropClaimCondition_V2.ClaimConditionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractURIUpdatedEvent {
  export type InputTuple = [prevURI: string, newURI: string];
  export type OutputTuple = [prevURI: string, newURI: string];
  export interface OutputObject {
    prevURI: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTotalSupplyUpdatedEvent {
  export type InputTuple = [maxTotalSupply: BigNumberish];
  export type OutputTuple = [maxTotalSupply: bigint];
  export interface OutputObject {
    maxTotalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletClaimCountUpdatedEvent {
  export type InputTuple = [count: BigNumberish];
  export type OutputTuple = [count: bigint];
  export interface OutputObject {
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    claimConditionIndex: BigNumberish,
    claimer: AddressLike,
    receiver: AddressLike,
    quantityClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimConditionIndex: bigint,
    claimer: string,
    receiver: string,
    quantityClaimed: bigint
  ];
  export interface OutputObject {
    claimConditionIndex: bigint;
    claimer: string;
    receiver: string;
    quantityClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletClaimCountUpdatedEvent {
  export type InputTuple = [wallet: AddressLike, count: BigNumberish];
  export type OutputTuple = [wallet: string, count: bigint];
  export interface OutputObject {
    wallet: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDropERC20_V2 extends BaseContract {
  connect(runner?: ContractRunner | null): IDropERC20_V2;
  waitForDeployment(): Promise<this>;

  interface: IDropERC20_V2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claim: TypedContractMethod<
    [
      receiver: AddressLike,
      quantity: BigNumberish,
      currency: AddressLike,
      pricePerToken: BigNumberish,
      proofs: BytesLike[],
      proofMaxQuantityPerTransaction: BigNumberish
    ],
    [void],
    "payable"
  >;

  setClaimConditions: TypedContractMethod<
    [
      phases: IDropClaimCondition_V2.ClaimConditionStruct[],
      resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      quantity: BigNumberish,
      currency: AddressLike,
      pricePerToken: BigNumberish,
      proofs: BytesLike[],
      proofMaxQuantityPerTransaction: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setClaimConditions"
  ): TypedContractMethod<
    [
      phases: IDropClaimCondition_V2.ClaimConditionStruct[],
      resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ClaimConditionsUpdated"
  ): TypedContractEvent<
    ClaimConditionsUpdatedEvent.InputTuple,
    ClaimConditionsUpdatedEvent.OutputTuple,
    ClaimConditionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractURIUpdated"
  ): TypedContractEvent<
    ContractURIUpdatedEvent.InputTuple,
    ContractURIUpdatedEvent.OutputTuple,
    ContractURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTotalSupplyUpdated"
  ): TypedContractEvent<
    MaxTotalSupplyUpdatedEvent.InputTuple,
    MaxTotalSupplyUpdatedEvent.OutputTuple,
    MaxTotalSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletClaimCountUpdated"
  ): TypedContractEvent<
    MaxWalletClaimCountUpdatedEvent.InputTuple,
    MaxWalletClaimCountUpdatedEvent.OutputTuple,
    MaxWalletClaimCountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WalletClaimCountUpdated"
  ): TypedContractEvent<
    WalletClaimCountUpdatedEvent.InputTuple,
    WalletClaimCountUpdatedEvent.OutputTuple,
    WalletClaimCountUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ClaimConditionsUpdated(tuple[])": TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;
    ClaimConditionsUpdated: TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;

    "ContractURIUpdated(string,string)": TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;
    ContractURIUpdated: TypedContractEvent<
      ContractURIUpdatedEvent.InputTuple,
      ContractURIUpdatedEvent.OutputTuple,
      ContractURIUpdatedEvent.OutputObject
    >;

    "MaxTotalSupplyUpdated(uint256)": TypedContractEvent<
      MaxTotalSupplyUpdatedEvent.InputTuple,
      MaxTotalSupplyUpdatedEvent.OutputTuple,
      MaxTotalSupplyUpdatedEvent.OutputObject
    >;
    MaxTotalSupplyUpdated: TypedContractEvent<
      MaxTotalSupplyUpdatedEvent.InputTuple,
      MaxTotalSupplyUpdatedEvent.OutputTuple,
      MaxTotalSupplyUpdatedEvent.OutputObject
    >;

    "MaxWalletClaimCountUpdated(uint256)": TypedContractEvent<
      MaxWalletClaimCountUpdatedEvent.InputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputObject
    >;
    MaxWalletClaimCountUpdated: TypedContractEvent<
      MaxWalletClaimCountUpdatedEvent.InputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputObject
    >;

    "TokensClaimed(uint256,address,address,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WalletClaimCountUpdated(address,uint256)": TypedContractEvent<
      WalletClaimCountUpdatedEvent.InputTuple,
      WalletClaimCountUpdatedEvent.OutputTuple,
      WalletClaimCountUpdatedEvent.OutputObject
    >;
    WalletClaimCountUpdated: TypedContractEvent<
      WalletClaimCountUpdatedEvent.InputTuple,
      WalletClaimCountUpdatedEvent.OutputTuple,
      WalletClaimCountUpdatedEvent.OutputObject
    >;
  };
}
