/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IDropClaimCondition_V2 {
  export type ClaimConditionStruct = {
    startTimestamp: BigNumberish;
    maxClaimableSupply: BigNumberish;
    supplyClaimed: BigNumberish;
    quantityLimitPerTransaction: BigNumberish;
    waitTimeInSecondsBetweenClaims: BigNumberish;
    merkleRoot: BytesLike;
    pricePerToken: BigNumberish;
    currency: AddressLike;
  };

  export type ClaimConditionStructOutput = [
    startTimestamp: bigint,
    maxClaimableSupply: bigint,
    supplyClaimed: bigint,
    quantityLimitPerTransaction: bigint,
    waitTimeInSecondsBetweenClaims: bigint,
    merkleRoot: string,
    pricePerToken: bigint,
    currency: string
  ] & {
    startTimestamp: bigint;
    maxClaimableSupply: bigint;
    supplyClaimed: bigint;
    quantityLimitPerTransaction: bigint;
    waitTimeInSecondsBetweenClaims: bigint;
    merkleRoot: string;
    pricePerToken: bigint;
    currency: string;
  };
}

export interface IDropERC721_V3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "claim"
      | "getApproved"
      | "isApprovedForAll"
      | "lazyMint"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setClaimConditions"
      | "supportsInterface"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ClaimConditionsUpdated"
      | "MaxTotalSupplyUpdated"
      | "MaxWalletClaimCountUpdated"
      | "NFTRevealed"
      | "TokensClaimed"
      | "TokensLazyMinted"
      | "Transfer"
      | "WalletClaimCountUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lazyMint",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [IDropClaimCondition_V2.ClaimConditionStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lazyMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimConditionsUpdatedEvent {
  export type InputTuple = [
    claimConditions: IDropClaimCondition_V2.ClaimConditionStruct[]
  ];
  export type OutputTuple = [
    claimConditions: IDropClaimCondition_V2.ClaimConditionStructOutput[]
  ];
  export interface OutputObject {
    claimConditions: IDropClaimCondition_V2.ClaimConditionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTotalSupplyUpdatedEvent {
  export type InputTuple = [maxTotalSupply: BigNumberish];
  export type OutputTuple = [maxTotalSupply: bigint];
  export interface OutputObject {
    maxTotalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWalletClaimCountUpdatedEvent {
  export type InputTuple = [count: BigNumberish];
  export type OutputTuple = [count: bigint];
  export interface OutputObject {
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTRevealedEvent {
  export type InputTuple = [endTokenId: BigNumberish, revealedURI: string];
  export type OutputTuple = [endTokenId: bigint, revealedURI: string];
  export interface OutputObject {
    endTokenId: bigint;
    revealedURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    claimConditionIndex: BigNumberish,
    claimer: AddressLike,
    receiver: AddressLike,
    startTokenId: BigNumberish,
    quantityClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimConditionIndex: bigint,
    claimer: string,
    receiver: string,
    startTokenId: bigint,
    quantityClaimed: bigint
  ];
  export interface OutputObject {
    claimConditionIndex: bigint;
    claimer: string;
    receiver: string;
    startTokenId: bigint;
    quantityClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensLazyMintedEvent {
  export type InputTuple = [
    startTokenId: BigNumberish,
    endTokenId: BigNumberish,
    baseURI: string,
    encryptedBaseURI: BytesLike
  ];
  export type OutputTuple = [
    startTokenId: bigint,
    endTokenId: bigint,
    baseURI: string,
    encryptedBaseURI: string
  ];
  export interface OutputObject {
    startTokenId: bigint;
    endTokenId: bigint;
    baseURI: string;
    encryptedBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletClaimCountUpdatedEvent {
  export type InputTuple = [wallet: AddressLike, count: BigNumberish];
  export type OutputTuple = [wallet: string, count: bigint];
  export interface OutputObject {
    wallet: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDropERC721_V3 extends BaseContract {
  connect(runner?: ContractRunner | null): IDropERC721_V3;
  waitForDeployment(): Promise<this>;

  interface: IDropERC721_V3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  claim: TypedContractMethod<
    [
      receiver: AddressLike,
      quantity: BigNumberish,
      currency: AddressLike,
      pricePerToken: BigNumberish,
      proofs: BytesLike[],
      proofMaxQuantityPerTransaction: BigNumberish
    ],
    [void],
    "payable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  lazyMint: TypedContractMethod<
    [
      amount: BigNumberish,
      baseURIForTokens: string,
      encryptedBaseURI: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setClaimConditions: TypedContractMethod<
    [
      phases: IDropClaimCondition_V2.ClaimConditionStruct[],
      resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      quantity: BigNumberish,
      currency: AddressLike,
      pricePerToken: BigNumberish,
      proofs: BytesLike[],
      proofMaxQuantityPerTransaction: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lazyMint"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      baseURIForTokens: string,
      encryptedBaseURI: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimConditions"
  ): TypedContractMethod<
    [
      phases: IDropClaimCondition_V2.ClaimConditionStruct[],
      resetClaimEligibility: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ClaimConditionsUpdated"
  ): TypedContractEvent<
    ClaimConditionsUpdatedEvent.InputTuple,
    ClaimConditionsUpdatedEvent.OutputTuple,
    ClaimConditionsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTotalSupplyUpdated"
  ): TypedContractEvent<
    MaxTotalSupplyUpdatedEvent.InputTuple,
    MaxTotalSupplyUpdatedEvent.OutputTuple,
    MaxTotalSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWalletClaimCountUpdated"
  ): TypedContractEvent<
    MaxWalletClaimCountUpdatedEvent.InputTuple,
    MaxWalletClaimCountUpdatedEvent.OutputTuple,
    MaxWalletClaimCountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTRevealed"
  ): TypedContractEvent<
    NFTRevealedEvent.InputTuple,
    NFTRevealedEvent.OutputTuple,
    NFTRevealedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensLazyMinted"
  ): TypedContractEvent<
    TokensLazyMintedEvent.InputTuple,
    TokensLazyMintedEvent.OutputTuple,
    TokensLazyMintedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WalletClaimCountUpdated"
  ): TypedContractEvent<
    WalletClaimCountUpdatedEvent.InputTuple,
    WalletClaimCountUpdatedEvent.OutputTuple,
    WalletClaimCountUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ClaimConditionsUpdated(tuple[])": TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;
    ClaimConditionsUpdated: TypedContractEvent<
      ClaimConditionsUpdatedEvent.InputTuple,
      ClaimConditionsUpdatedEvent.OutputTuple,
      ClaimConditionsUpdatedEvent.OutputObject
    >;

    "MaxTotalSupplyUpdated(uint256)": TypedContractEvent<
      MaxTotalSupplyUpdatedEvent.InputTuple,
      MaxTotalSupplyUpdatedEvent.OutputTuple,
      MaxTotalSupplyUpdatedEvent.OutputObject
    >;
    MaxTotalSupplyUpdated: TypedContractEvent<
      MaxTotalSupplyUpdatedEvent.InputTuple,
      MaxTotalSupplyUpdatedEvent.OutputTuple,
      MaxTotalSupplyUpdatedEvent.OutputObject
    >;

    "MaxWalletClaimCountUpdated(uint256)": TypedContractEvent<
      MaxWalletClaimCountUpdatedEvent.InputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputObject
    >;
    MaxWalletClaimCountUpdated: TypedContractEvent<
      MaxWalletClaimCountUpdatedEvent.InputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputTuple,
      MaxWalletClaimCountUpdatedEvent.OutputObject
    >;

    "NFTRevealed(uint256,string)": TypedContractEvent<
      NFTRevealedEvent.InputTuple,
      NFTRevealedEvent.OutputTuple,
      NFTRevealedEvent.OutputObject
    >;
    NFTRevealed: TypedContractEvent<
      NFTRevealedEvent.InputTuple,
      NFTRevealedEvent.OutputTuple,
      NFTRevealedEvent.OutputObject
    >;

    "TokensClaimed(uint256,address,address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensLazyMinted(uint256,uint256,string,bytes)": TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;
    TokensLazyMinted: TypedContractEvent<
      TokensLazyMintedEvent.InputTuple,
      TokensLazyMintedEvent.OutputTuple,
      TokensLazyMintedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WalletClaimCountUpdated(address,uint256)": TypedContractEvent<
      WalletClaimCountUpdatedEvent.InputTuple,
      WalletClaimCountUpdatedEvent.OutputTuple,
      WalletClaimCountUpdatedEvent.OutputObject
    >;
    WalletClaimCountUpdated: TypedContractEvent<
      WalletClaimCountUpdatedEvent.InputTuple,
      WalletClaimCountUpdatedEvent.OutputTuple,
      WalletClaimCountUpdatedEvent.OutputObject
    >;
  };
}
