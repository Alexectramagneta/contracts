/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ITokenERC721 {
  export type MintRequestStruct = {
    to: AddressLike;
    royaltyRecipient: AddressLike;
    royaltyBps: BigNumberish;
    primarySaleRecipient: AddressLike;
    uri: string;
    price: BigNumberish;
    currency: AddressLike;
    validityStartTimestamp: BigNumberish;
    validityEndTimestamp: BigNumberish;
    uid: BytesLike;
  };

  export type MintRequestStructOutput = [
    to: string,
    royaltyRecipient: string,
    royaltyBps: bigint,
    primarySaleRecipient: string,
    uri: string,
    price: bigint,
    currency: string,
    validityStartTimestamp: bigint,
    validityEndTimestamp: bigint,
    uid: string
  ] & {
    to: string;
    royaltyRecipient: string;
    royaltyBps: bigint;
    primarySaleRecipient: string;
    uri: string;
    price: bigint;
    currency: string;
    validityStartTimestamp: bigint;
    validityEndTimestamp: bigint;
    uid: string;
  };
}

export interface ISignatureMintERC721_V1Interface extends Interface {
  getFunction(
    nameOrSignature: "mintWithSignature" | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mintWithSignature",
    values: [ITokenERC721.MintRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ITokenERC721.MintRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "mintWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface ISignatureMintERC721_V1 extends BaseContract {
  connect(runner?: ContractRunner | null): ISignatureMintERC721_V1;
  waitForDeployment(): Promise<this>;

  interface: ISignatureMintERC721_V1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  mintWithSignature: TypedContractMethod<
    [_req: ITokenERC721.MintRequestStruct, _signature: BytesLike],
    [bigint],
    "payable"
  >;

  verify: TypedContractMethod<
    [_req: ITokenERC721.MintRequestStruct, _signature: BytesLike],
    [[boolean, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "mintWithSignature"
  ): TypedContractMethod<
    [_req: ITokenERC721.MintRequestStruct, _signature: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [_req: ITokenERC721.MintRequestStruct, _signature: BytesLike],
    [[boolean, string]],
    "view"
  >;

  filters: {};
}
